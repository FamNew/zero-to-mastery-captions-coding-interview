WEBVTT

00:01.700 --> 00:04.820
จาวาสคริปต์ทำงานอย่างไร

00:04.820 --> 00:08.340
ลองนึกภาพการได้รับคำถามนี้ในระหว่างการเข้าร่วมหรือเกี่ยวกับเรื่องนี้

00:08.360 --> 00:13.160
อธิบายความแตกต่างระหว่างแบบอะซิงโครนัสและแบบซิงโครนัสและ Javascript

00:13.220 --> 00:16.000
หรือบางทีพวกเขาขอให้คุณอธิบายคำแถลงนี้

00:16.010 --> 00:19.540
Javascript เป็นภาษาแบบเธรดเดี่ยวที่ไม่สามารถบล็อกได้

00:20.410 --> 00:24.960
โอ้เด็กน้อยในวิดีโอนี้เราจะช่วยคุณตอบคำถามเหล่านั้น

00:24.960 --> 00:29.550
นี่คือวิดีโอที่คุณอาจต้องเยี่ยมชมสองสามครั้งในขณะที่คุณกำลังจะได้รับจริงๆ

00:29.640 --> 00:32.850
ดังนั้นอย่าท้อถ้าคุณไม่มั่นใจ 100%

00:32.910 --> 00:35.520
ดูต่อไปเรื่อย ๆ แล้วคุณจะได้มัน

00:35.520 --> 00:40.580
ตอนนี้เราไม่จำเป็นต้องรู้ว่าจาวาสคริปต์ทำงานอย่างไรภายในเพื่อเขียนโปรแกรม

00:40.950 --> 00:42.590
แต่มันเป็นสิ่งสำคัญในการเรียนรู้

00:42.900 --> 00:47.260
ฉันเห็นผู้คนจำนวนมากที่เป็นนักพัฒนามานานหลายปีและไม่มีใครรู้เรื่องนี้

00:47.280 --> 00:51.140
มันเหมือนกับการเป็นนักบินและไม่รู้ว่าเครื่องบินสามารถบินได้อย่างไร

00:51.510 --> 00:53.480
ตกลงที่น่าทึ่งเล็กน้อยที่นั่น

00:53.500 --> 00:55.230
แต่คุณได้รับคะแนนของฉัน

00:55.230 --> 01:00.210
งั้นเริ่มกันก่อนว่าโปรแกรมคืออะไร

01:00.510 --> 01:03.490
โปรแกรมต้องทำสิ่งที่ง่าย

01:03.540 --> 01:05.550
มีการจัดสรรหน่วยความจำ

01:05.580 --> 01:11.120
มิฉะนั้นเราจะสามารถมีตัวแปรหรือแม้กระทั่งมีไฟล์ในคอมพิวเตอร์ของเรา

01:11.130 --> 01:16.850
นอกจากนี้ยังมีการแยกวิเคราะห์และรันสคริปต์ซึ่งหมายถึงการอ่านและเรียกใช้คำสั่ง

01:17.190 --> 01:17.760
ตกลง.

01:17.940 --> 01:26.270
ตอนนี้เราก็รู้แล้วว่าจากการสนทนาครั้งก่อนของเรามีเอ็นจิ้นจาวาสคริปต์ที่แต่ละเบราว์เซอร์ใช้ใน Chrome มันเป็น

01:26.280 --> 01:36.900
V8 และเอ็นจิน V8 อ่านจาวาสคริปต์ที่เราเขียนในการเปลี่ยนแปลงลงในคำแนะนำ

01:37.440 --> 01:43.370
ตอนนี้เครื่องยนต์ประกอบด้วยหน่วยความจำสองส่วนและกองการโทร

01:43.440 --> 01:45.120
ตอนนี้หน่วยความจำกอง

01:45.270 --> 01:48.680
นี่คือที่ที่การจัดสรรหน่วยความจำเกิดขึ้น

01:48.810 --> 01:50.680
และไม่ต้องกังวลเราจะพูดถึงเรื่องนี้

01:51.000 --> 01:52.230
และจากนั้นสแตกการโทร

01:52.260 --> 01:54.920
นี่คือที่ที่โค้ดของคุณถูกอ่านและรัน

01:54.960 --> 01:57.650
มันบอกคุณว่าคุณอยู่ที่ไหนในโปรแกรม

01:59.070 --> 02:01.900
ดังนั้นลดความซับซ้อนนี้และแสดงให้คุณเห็นสิ่งที่ฉันหมายถึง

02:04.370 --> 02:06.310
ฉันมีข้อความประเสริฐตรงนี้

02:06.710 --> 02:16.650
และสำหรับเราในการจัดสรรหน่วยความจำและหน่วยความจำฮีปมันทำได้ง่ายเหมือนกับการทำ Konst a Eco ให้กับหนึ่งที่เราเพิ่งจัดสรรหน่วยความจำตอนนี้เมื่อเรากำหนดเอนจิ้นจาวาสคริปต์จะจำได้ว่า

02:17.060 --> 02:24.110
OIA A มีค่า

02:24.470 --> 02:28.070
1

02:28.190 --> 02:34.540
เราเพิ่งใช้หน่วยความจำจนหมดและฉันก็สามารถทำต่อไปเรื่อย ๆ ได้อย่างนี้

02:34.610 --> 02:41.570
ฉันสามารถคัดลอกและวางและเปลี่ยนตัวแปรเหล่านี้เป็น B และ C ต่อไปและฉันสามารถเปลี่ยนค่าเป็นร้อยและอาจนี่คือ

02:41.570 --> 02:44.480
10

02:45.560 --> 02:46.110
เย็น.

02:46.160 --> 02:49.870
ทีนี้ปัญหาที่เราเห็นกับสิ่งนี้คืออะไร

02:50.040 --> 02:55.750
นี่คือสิ่งที่เรียกว่าหน่วยความจำรั่วที่คุณจะได้ยินเมื่อคุณเป็นนักพัฒนา

02:56.110 --> 03:05.350
และสิ่งที่เราทำที่นี่คือเราสร้างตัวแปรทั้งหมดเหล่านี้ตัวแปรโกลบอลเหล่านี้ที่อยู่ในหน่วยความจำฮีป แต่คุณจะเห็นกล่องนี้ถูกต้อง

03:05.530 --> 03:10.940
และด้วยความจำทั้งหมดเรามีจำนวน จำกัด ที่เราสามารถทำได้

03:11.080 --> 03:17.950
ดังนั้นโดยการเพิ่มจำนวนของตัวแปรที่เรามี Imagine

03:17.950 --> 03:21.720
ถ้าฉันมีเพียงหน้านี้เต็มไปด้วยตัวแปรและแทนที่จะเป็นเพียงตัวเลขพวกเขาชอบอาร์เรย์ที่ใหญ่มาก

03:22.030 --> 03:28.450
การรั่วไหลของหน่วยความจำเกิดขึ้นเมื่อคุณมีหน่วยความจำที่ไม่ได้ใช้เช่นสมมติว่าตอนนี้เรากำลังใช้ตัวแปร

03:28.450 --> 03:36.310
a แต่มันก็ทนได้ดีด้วยการมีหน่วยความจำที่ไม่ได้ใช้

03:36.580 --> 03:40.050
และนั่นคือเหตุผลที่คุณอาจได้ยินว่าทำไมตัวแปรทั่วโลกจึงไม่ดี

03:40.150 --> 03:44.440
ตัวแปรทั่วโลกไม่ดีเพราะเราไม่ลืมที่จะทำความสะอาดตัวเอง

03:44.560 --> 03:51.280
เราเติมหน่วยความจำนี้จนเต็มและในที่สุดเบราว์เซอร์จะไม่สามารถทำงานได้

03:51.300 --> 03:54.040
เอาล่ะนั่นคือความทรงจำ

03:54.090 --> 03:56.100
มาพูดคุยเกี่ยวกับ call stack กัน

03:56.220 --> 03:57.040
นั่นคืออะไร.

03:58.210 --> 04:17.460
อีกครั้งกับ call stack เราสามารถมีบางอย่างเช่นนี้เข้าสู่ระบบคอนโซล Mogo 1 เข้าสู่ระบบเพื่อชื่อในที่สุดคอนโซลเข้าสู่ระบบ

04:17.670 --> 04:23.260
3

04:23.400 --> 04:28.400
ถ้าฉันใช้รหัสนี้ในเทอร์มินัลเบราว์เซอร์ของฉัน

04:28.600 --> 04:39.880
ฉันได้รับหนึ่งสองสาม call stack ถ้าคุณจำได้ว่ามันคือสิ่งที่อ่านและรันสคริปต์ของเรา

04:40.260 --> 04:45.950
ดังนั้นสิ่งที่สแตกการโทรจะอ่านไดอะล็อกคอนโซลบรรทัดแรก

04:46.140 --> 04:48.610
มันใส่ใน call stack นี้

04:48.890 --> 04:52.530
ดังนั้นเอ็นจิ้นจาวาสคริปต์จึงกล่าวว่าได้เพิ่มการโต้ตอบของคอนโซล

04:52.680 --> 05:03.170
ลอง pop มันลงบน call stack

05:03.170 --> 05:09.920
นี้แล้วมันก็รันมันและสร้างมันขึ้นมาแล้วมันบอกว่าตกลงฉันกำลังถอดคอนโซลล็อคตัวแรกเมื่อฉันเพิ่งเรียกใช้เสร็จฉันจะวางบันทึกคอนโซลตัวที่สองใน call stack ของฉัน

05:09.920 --> 05:13.860
ที่นี่และพูดว่าใช่

05:13.990 --> 05:15.090
ดำเนินการสอง

05:15.680 --> 05:23.410
จากนั้นมันก็เอาออกมาว่ามันจะปรากฏขึ้นแล้วรับ Konsole ล็อค 3 และบันทึก Konst ล็อค 3

05:23.420 --> 05:31.960
ในที่สุดก็ลบมันออก แต่เราจะมีตัวอย่างที่ซับซ้อนเพิ่มขึ้นอีกเล็กน้อยเพื่อแสดงจุดนี้

05:32.160 --> 05:34.750
ลองนึกภาพฉันมีบางอย่างเช่นนี้

05:37.450 --> 05:52.390
ฉันมีแนวคิดของฟังก์ชั่นหนึ่งและภายในฟังก์ชั่นนี้เรามีฟังก์ชั่นอื่นที่สอดคล้องและสำหรับตอนนี้มันไม่ได้ทำอะไรมากไปที่คอนโซล dot log

05:52.420 --> 06:04.390
และที่นี่เราแค่บอกว่าเรารอนดอนด้าทำหน้าที่

06:04.410 --> 06:14.990
ดังนั้นถ้าฉันคัดลอกและวางและวางลงในคอนโซลของเราและฉันเรียกใช้หนึ่งฉันได้สี่และละเว้นข้อผิดพลาดที่นี่

06:15.060 --> 06:17.400
มันเกี่ยวข้องกับแอพของฉันในเบราว์เซอร์

06:17.510 --> 06:19.000
แต่คุณจะเห็นว่าเราได้สี่

06:19.010 --> 06:21.920
ดังนั้นสิ่งที่เกิดขึ้นที่นี่ตาม call stack

06:22.310 --> 06:30.050
ถ้าเรามี call stack ตรงนี้เราจะเรียกใช้ฟังก์ชันเดียวก่อน

06:30.050 --> 06:34.520
ดังนั้นที่ด้านบนของสแตกการเรียกฟังก์ชันหนึ่งได้รับการทำงาน

06:34.760 --> 06:40.050
และเมื่อเราเข้าไปใน call stack เราจะเห็นว่าเราเรียกใช้ฟังก์ชันอื่น

06:40.190 --> 06:50.410
ดังนั้นสองจึงอยู่ด้านบนของ call stack และตอนนี้เราเรียกใช้ฟังก์ชันที่สองซึ่งก็คือ Konsole บันทึก

06:50.600 --> 07:00.100
ดังนั้นเราจึงมีคอนโซลบันทึก Dom สำหรับการทำงานในสองฟังก์ชัน

07:00.130 --> 07:03.990
ตอนนี้เราได้อ่านสิ่งนี้แล้วสแตกการโทรกำลังจะบอกว่าตกลง

07:04.030 --> 07:06.280
ไม่มีอะไรอื่นนอกเหนือจากนี้

07:06.280 --> 07:11.410
ฉันจะเรียกใช้ Konsole lock 4 ดังนั้นมันจะพิมพ์หมายเลขสี่ที่นี่

07:11.410 --> 07:22.280
มันจะลบมันออกจาก call stack แล้วลบทั้งสองออกแล้วลบอันเนื่องจากมันเพิ่งถูกเรียกและตอนนี้ call

07:22.310 --> 07:28.880
stack ว่างเปล่า

07:29.260 --> 07:30.020
เอาล่ะ

07:30.040 --> 07:30.590
น่ากลัว

07:30.700 --> 07:34.690
ทีนี้มาทบทวนคำแถลงใหม่ตั้งแต่ต้นของวิดีโอ

07:34.910 --> 07:43.690
Javascript เป็นภาษาที่มีเธรดเดียวที่สามารถไม่บล็อกการเธรดเดี่ยวหมายความว่ามีสแต็กการโทรเดียว

07:44.590 --> 07:48.340
และหนึ่ง call stack เท่านั้นคุณสามารถทำสิ่งหนึ่งครั้ง

07:48.370 --> 07:52.870
และอย่างที่เราเห็น call stack เป็นคนแรกที่เข้ามาล่าสุด

07:53.110 --> 08:01.070
ดังนั้นสิ่งที่อยู่ด้านบนสแตกการเรียกจะถูกเรียกใช้ก่อนจากนั้นด้านล่างที่อยู่ด้านล่างที่สแตกการโทรว่างเปล่า

08:02.550 --> 08:05.810
ขณะนี้ภาษาอื่นสามารถโทรได้หลายครั้ง

08:05.940 --> 08:08.880
และสิ่งเหล่านี้เรียกว่ามัลติเธรด

08:08.900 --> 08:15.290
คุณยังสามารถดูว่าสิ่งนี้มีประโยชน์อย่างไรที่จะมี call stack หลายตัวเพื่อที่เราจะได้ไม่รออะไรอีก

08:15.410 --> 08:18.230
ทำไมจาวาสคริปต์จึงถูกออกแบบมาให้เป็นเธรดเดี่ยว

08:19.170 --> 08:27.920
ในขณะที่ใช้งานโค้ดบนเธรดเดี่ยวนั้นค่อนข้างง่ายเนื่องจากคุณไม่ต้องจัดการกับสถานการณ์ที่ซับซ้อนที่เกิดขึ้นในสภาพแวดล้อมแบบมัลติเธรด

08:27.930 --> 08:29.720
คุณมีสิ่งหนึ่งที่ต้องกังวล

08:29.940 --> 08:39.000
และเมื่อฉันบอกว่าปัญหาเกี่ยวกับสภาพแวดล้อมแบบมัลติเธรดสามารถมีสิ่งเช่น deadlocks ได้แล้ว

08:39.150 --> 08:47.500
เดาสิ่งที่คุณเพิ่งเรียนรู้ว่าการเขียนโปรแกรมแบบซิงโครนัสหมายถึงการเขียนโปรแกรมแบบซิงโครนัสก็หมายถึง

08:47.650 --> 08:53.750
บรรทัดที่หนึ่งได้รับการดำเนินการแล้วบรรทัดที่ 2 ได้รับการดำเนินการแล้วบรรทัดที่ 3 ได้รับการดำเนินการ

08:55.100 --> 08:59.480
หลังสามารถเริ่มต้นก่อนที่จะเสร็จสิ้นครั้งแรก

08:59.480 --> 09:06.640
ดังนั้นล็อคคอนโซล 2 นี้ไม่เริ่มจนกว่าการล็อค Konsole

09:06.670 --> 09:12.380
จะเสร็จสิ้นและการยกเลิก 3 ไม่เริ่มจนกว่าจะเสร็จสิ้นเนื่องจากเราได้ดูที่สแตกการโทรเนื่องจากสแตกการโทร

09:12.410 --> 09:16.620
ตอนนี้คุณอาจเคยได้ยินเกี่ยวกับไซต์ล้นสแต็ค

09:16.700 --> 09:20.250
หากคุณเป็นนักพัฒนาซอฟต์แวร์คุณใช้มันทุกวันและ

09:20.270 --> 09:24.730
คุณเคยสงสัยหรือไม่ว่า Stack Overflow หมายถึงอะไร

09:26.020 --> 09:28.350
จะกองมากเกิน

09:28.500 --> 09:32.430
นี่คือเมื่อสแต็กล้น

09:32.430 --> 09:43.320
เราชอบพูดคุยเกี่ยวกับการรั่วไหลของหน่วยความจำและวิธีที่หน่วยความจำฮีปของเครื่องยนต์ javascript สามารถล้นได้ดีกับกองล้น

09:43.320 --> 09:48.000
สิ่งนี้เกิดขึ้นเมื่อ call stack มีขนาดใหญ่ขึ้นและใหญ่ขึ้นเรื่อย ๆ

09:48.000 --> 09:49.380
จนกระทั่งไม่มีพื้นที่เพียงพออีกต่อไป

09:49.380 --> 09:52.200
เราจะทำสิ่งนั้นได้อย่างไร

09:52.200 --> 09:54.590
เราสามารถสร้างสแต็คล้นใหม่ได้ไหม

09:54.930 --> 09:59.010
ใช่ฉันสามารถแสดงให้คุณเห็นได้อย่างรวดเร็วว่าการสร้างสแต็คล้น

09:59.010 --> 10:13.530
สิ่งที่คุณต้องทำคือฟังก์ชั่น foo เหมือนที่เรามีในที่นี้และฟังก์ชั่นนี้จะมีมือ foop

10:13.540 --> 10:17.940
พวกเราแค่ไปทำหน้าที่อาหารของเราให้ถูกต้อง

10:17.980 --> 10:21.800
ดูสับสนว่าเกิดอะไรขึ้นที่นี่

10:22.120 --> 10:30.300
สิ่งนี้เรียกว่าการเรียกซ้ำและการเรียกซ้ำหมายถึงฟังก์ชันที่เรียกตัวเองว่า

10:30.700 --> 10:35.990
ดังนั้นถ้าคุณดูว่าฟังก์ชันนี้เราใช้งาน foo และ foo อย่างไร

10:36.170 --> 10:39.610
สิ่งใดที่ foo ทำได้ดีเราเรียกใช้ foo อีกครั้ง

10:39.680 --> 10:44.900
ดังนั้นมันจะวนซ้ำไปเรื่อย ๆ ซ้ำแล้วซ้ำอีกเรื่อย ๆ

10:44.960 --> 10:46.960
แต่ไม่มีที่สิ้นสุดในสายตาที่ถูกต้อง

10:47.090 --> 10:50.540
เราเพิ่ม foo ลงใน call stack อย่างต่อเนื่อง

10:50.660 --> 10:58.220
เราเพิ่มมันไปเรื่อย ๆ เรื่อย ๆ ซ้ำ ๆ ไปเรื่อย ๆ

10:58.220 --> 10:59.720
ซ้ำแล้วซ้ำเล่าและเราก็มีกองซ้อนมากมาย

11:00.080 --> 11:08.000
ดังนั้นถ้าคุณต้องการที่จะสนุกไปกับเบราว์เซอร์ของคุณเข้าไปในคอนโซลของคุณและเรียกใช้สิ่งนี้และดูว่าเกิดอะไรขึ้น

11:08.000 --> 11:10.170
คุณจะได้รับสแต็คล้น

11:11.080 --> 11:11.900
เอาล่ะ

11:11.920 --> 11:14.320
หวังว่าตอนนี้มันสมเหตุสมผลแล้ว

11:14.320 --> 11:20.470
เอ็นจิ้น javascript ซึ่งเป็นเอ็นจิ้น V-8 Ancrum มีชิปหน่วยความจำและสแต็กการโทร

11:20.530 --> 11:32.220
ตอนนี้จาวาสคริปต์เป็นเธรดเดี่ยวเพียงคำสั่งเดียวที่ถูกดำเนินการในเวลา แต่มีปัญหาตอนนี้ไม่ได้มัน

11:32.220 --> 11:38.210
ถ้า y2 เป็นงานใหญ่ที่เราต้องทำ

11:38.380 --> 11:44.420
อาจวนรอบอาร์เรย์ที่มี Aietes หลายล้านคน

11:44.460 --> 11:54.950
ทีนี้เราจะให้บันทึกของคอนโซลนี้ดำเนินการแล้วบรรทัดที่สองจากนั้นมันเป็นงานที่ยิ่งใหญ่มากที่เราจะทำงานที่นั่นและยกเลิกเช่น 3

11:54.950 --> 12:00.690
เราจะใช้เวลานานมากในการหลงทางและในตัวอย่างเล็ก ๆ ของเราที่ไม่ได้มีความหมายอะไรมาก

12:00.690 --> 12:05.550
แต่ถ้าเขามีสิ่งนี้บนเว็บไซต์ที่ดีผู้ใช้จะไม่สามารถทำอะไรได้

12:05.610 --> 12:11.330
เว็บไซต์จะค้างมากจนกระทั่งงานนั้นเสร็จและผู้ใช้รออยู่ที่นั่น

12:11.370 --> 12:13.330
นั่นมันไม่ค่อยดีเท่าไหร่

12:13.500 --> 12:20.760
ถ้าเรามีฟังก์ชั่นหนึ่งที่ใช้เวลานานมากในการทำหน้าที่ประสานสาย

12:20.790 --> 12:23.100
ลองนึกภาพร้านอาหารบุฟเฟ่ต์ที่ถูกต้อง

12:23.190 --> 12:29.610
ถ้าทุกคนต้องการ แต่บ๊อบบี้บอกว่าเดี๋ยวก่อนพวกต้องกินและวางเบคอนบนจานของฉัน

12:29.640 --> 12:31.870
ทุกคนต้องรอแถว

12:32.290 --> 12:43.420
ดังนั้นดูเหมือนว่าเราต้องการบางสิ่งบางอย่างที่ไม่ปิดกั้นจำคำสั่งแรกของเราที่เราทำในจาวาสคริปต์วิดีโอนี้เป็นภาษาเธรดเดียวที่สามารถบล็อก

12:43.740 --> 12:47.180
เป็นการดีที่เราจะไม่รอสิ่งที่ต้องใช้เวลา

12:47.640 --> 12:52.930
ดังนั้นเราจะทำอย่างไรทั้งหมดนี้ไม่ตรงกันกับการช่วยเหลือ

12:53.000 --> 12:59.410
คิดว่าอะซิงโครนัสเหมือนกับการดำเนินการแบบซิงโครนัสของพฤติกรรมที่ยอดเยี่ยมเพราะสามารถคาดเดาได้

13:00.080 --> 13:02.510
เรารู้ว่าเกิดอะไรขึ้นก่อนแล้วจะเกิดอะไรขึ้นต่อไป

13:02.510 --> 13:03.730
เกิดอะไรขึ้นที่นั่น

13:04.070 --> 13:05.530
แต่มันอาจช้าลง

13:05.750 --> 13:12.020
ดังนั้นเมื่อเราต้องทำสิ่งต่าง ๆ เช่นการประมวลผลภาพหรือการร้องขอผ่านเครือข่ายเช่นการเรียก API

13:12.380 --> 13:15.230
และไม่ต้องกังวลเราจะพูดถึงเรื่องนี้ในวิดีโอในอนาคต

13:15.230 --> 13:19.010
เราต้องการบางสิ่งที่มากกว่าแค่งานซิงโครนัสที่ถูกต้อง

13:19.100 --> 13:20.520
ดังนั้นคุณคิดกับตัวเอง

13:20.720 --> 13:23.540
อังเดรเราจะทำวิธีการเขียนโปรแกรมไม่ตรงกัน

13:24.110 --> 13:27.460
ขอผมลบความยุ่งเหยิงนี้หน่อย

13:28.070 --> 13:47.750
เราสามารถทำการเขียนโปรแกรมแบบอะซิงโครนัสโดยทำสิ่งนี้บอกเวลาที่เรากำลังจะพูดถึงคือฟังก์ชั่นที่มาในเบราว์เซอร์ของเราและมันช่วยให้เราสร้างเวลาได้และเราสามารถให้พารามิเตอร์แรกคือฟังก์ชัน ที่เราต้องการเรียกใช้

13:47.860 --> 13:51.030
จากนั้นพารามิเตอร์ที่สองคือจำนวนวินาทีที่เราต้องการรอ

13:51.040 --> 13:53.300
สมมุติว่าฉันต้องการรอสองวินาที

13:53.320 --> 13:55.870
ดังนั้น 200 2000 มิลลิวินาที

13:56.290 --> 14:00.750
ถ้าฉันทำตอนนี้มาทำงานในคอนโซลและดูว่าเกิดอะไรขึ้น

14:07.720 --> 14:10.180
แล้วมีอะไรกันแน่

14:10.560 --> 14:12.510
เรามีข้อเสีย ..

14:12.690 --> 14:13.510
หนึ่ง.

14:14.530 --> 14:20.680
จากนั้นยกเลิกเช่นสามและจากนั้นยกเลิกการเข้าสู่สองวินาทีในภายหลัง

14:21.040 --> 14:28.450
ดูเหมือนว่าเราเพิ่งจะข้ามขั้นตอนนี้ทั้งหมดแล้ววางสิ่งนี้ไว้ท้ายสุด

14:29.740 --> 14:36.770
คุณก็แค่เขียนแบบอะซิงโครนัส woodness เพื่อที่จะเข้าใจสิ่งนี้และสิ่งที่เพิ่งเกิดขึ้น

14:36.970 --> 14:49.550
ฉันต้องนำคุณไปยังส่วนถัดไปและนั่นก็เพื่อให้จาวาสคริปต์ที่เรารู้ว่ามันจะทำงานสำหรับเครื่องยนต์จาวาสคริปต์ที่มีหน่วยความจำกองและกองการโทรเพื่อเรียก

14:49.700 --> 15:03.480
เราต้องการมากกว่าเครื่องมือจาวาสคริปต์ที่เราต้องการสิ่งที่เราเรียกว่าสภาพแวดล้อมรันไทม์ของจาวาสคริปต์และสภาพแวดล้อมรันไทม์ของจาวาสคริปต์ก็เป็นส่วนหนึ่งของเบราว์เซอร์ที่รวมอยู่ในเบราว์เซอร์

15:03.710 --> 15:06.640
พวกเขามีสิ่งพิเศษอยู่ด้านบนของเครื่องยนต์

15:06.650 --> 15:12.760
พวกเขามีสิ่งที่เรียกว่าเว็บ API ให้โทรกลับ Q และวนรอบเหตุการณ์

15:13.130 --> 15:19.030
และอย่างที่คุณเห็นในที่นี้กล่าวว่าการหมดเวลาเป็นส่วนหนึ่งของเว็บ API

15:19.130 --> 15:22.890
ไม่ใช่ส่วนหนึ่งของจาวาสคริปต์คือในทางเทคนิค

15:23.030 --> 15:26.250
มันคืออะไร แต่เบราว์เซอร์ให้เราใช้

15:26.300 --> 15:28.370
ดังนั้นเราสามารถทำโปรแกรมอะซิงโครนัสได้

15:28.740 --> 15:29.160
ตกลง.

15:29.240 --> 15:31.390
ดูแผนภาพนี้

15:31.460 --> 15:34.940
ดูว่าเราสามารถคิดได้ว่ารหัสของเรากำลังทำอะไรอยู่

15:36.610 --> 15:59.320
เราสามารถสร้างที่นี่สแต็คการโทรของเราเองจะมีเว็บ API จากนั้นเราจะมีคิวการโทรกลับและวนซ้ำเหมือนที่เรามีในสภาพแวดล้อมรันไทม์ของจาวาสคริปต์

15:59.350 --> 16:00.560
ดังนั้นสิ่งที่เกิดขึ้นที่นี่

16:00.610 --> 16:07.470
ก่อนอื่นเรามีบันทึกของคอนโซลที่เข้าไปใน call stack

16:08.350 --> 16:10.730
และที่ได้รับการทำงาน

16:10.960 --> 16:14.720
ดังนั้นเราจึงบันทึกล็อกคอนโซลไปยังเบราว์เซอร์

16:15.100 --> 16:17.680
จากนั้นเราจะได้ตั้งค่าการหมดเวลา

16:18.830 --> 16:23.190
เข้าสู่สแต็คการโทรของเราเพราะเราทำภารกิจแรกเสร็จเราจะไปที่สอง

16:23.680 --> 16:30.430
และสิ่งที่บอกว่าหมดเวลาสิ่งที่จะเกิดขึ้นเป็นอย่างดีในกองโทรจะบอกว่าตกลงฉันได้ตั้งเวลา

16:30.890 --> 16:37.940
และเนื่องจากการหมดเวลาดังกล่าวไม่ได้เป็นส่วนหนึ่งของสคริปต์ของ Joe แต่เป็นส่วนหนึ่งของเว็บ API จึงมีคุณสมบัติพิเศษนี้

16:37.940 --> 16:42.590
สิ่งที่จะเกิดขึ้นคือมันเรียกใช้เว็บ API

16:43.840 --> 16:56.450
และบอกว่าหมดเวลาตั้งเฮ้เพิ่งถูกเรียกและเพราะเราได้แจ้งให้คนที่แต่งตัวประหลาดใหญ่เราสามารถป๊อปออกจากสแต็คการโทร

16:56.470 --> 17:02.280
ตอนนี้เว็บ API เริ่มจับเวลาที่นี่จับเวลาสองวินาที

17:02.350 --> 17:06.440
มันจะรู้ว่าภายในสองวินาทีคุณต้องทำอะไร

17:07.500 --> 17:18.970
และเนื่องจาก call stack ว่างเปล่าเอ็นจิ้น javascript จะไปที่ console log 3 และดำเนินการสิ่งนี้

17:19.130 --> 17:24.510
ดังนั้นมันจึงสมเหตุสมผลแล้วตอนนี้เราได้ทำหนึ่งและสามไปแล้ว แต่เรายังคงบอกว่าหมดเวลา

17:24.680 --> 17:27.710
สองวินาทีในเว็บ API

17:27.980 --> 17:37.240
ตอนนี้หลังจากสองวินาทีเมื่อเวลาที่กำหนดของเราเพิ่มขึ้น API ของเว็บก็จะบอกว่าการตั้งค่าการหมดเวลาโอเคควรจะถูกเรียกใช้

17:37.280 --> 17:38.580
มาดูกันว่ามีอะไรอยู่ข้างในบ้าง

17:38.690 --> 17:40.760
เรามีล็อคคอนโซลด้วย

17:41.000 --> 17:45.270
ดังนั้นสิ่งที่จะเกิดขึ้นคือมันกำลังจะบอกว่าเฮ้ตั้งเวลาเสร็จแล้ว

17:46.660 --> 18:10.730
เรามีการโทรกลับและการเรียกคืนเวลาที่กล่าวถึงนี้เราเพิ่มลงในการโทรกลับเพื่อบอกว่าเฮ้เราต้องเรียกใช้บางสิ่งบางอย่างที่เราพร้อมที่จะเรียกใช้ตอนนี้ส่วนสุดท้ายของเหตุการณ์ที่เหตุการณ์วนรอบ สแตกการโทรว่างเปล่าและตรวจสอบอยู่ตลอดเวลา

18:10.730 --> 18:16.220
หากสแต็กต์ว่างเปล่าและถ้าสแตกการโทรว่างเปล่าและไม่มีอะไรทำงานในขณะนี้เอ็นจิ้น javascript

18:16.220 --> 18:20.060
ก็จะบอกว่าเรามีการโทรกลับหรือไม่

18:20.060 --> 18:25.280
มันจะตรวจสอบรหัสกลับไปหาคุณและพูดว่ามีอะไรในนั้นเพราะสแตกการโทรว่างเปล่า

18:25.280 --> 18:28.170
เราสามารถโยนบางสิ่งในนั้นและทำให้มันทำงานได้

18:28.550 --> 18:31.390
ในกรณีของเราเราบอกว่าใช่แล้วฉันทำ

18:31.400 --> 18:34.440
ขอผมนำแนวคิดนี้ไปใช้

18:34.490 --> 18:45.580
ดังนั้นตอนนี้เราย้ายโค้ดกลับไปที่ call stack และจากนั้นกลับมาเราก็เป็นและโดยการเรียกใช้เราจะเห็นว่าเรามีบันทึกคอนโซลด้วย

18:45.830 --> 18:56.840
ดังนั้นจะบอกว่ายกเลิกหรือเข้าสู่ระบบเพื่อที่จะเรียกใช้ฟังก์ชั่นนี้และเมื่อเสร็จแล้วมันจะโผล่ออกมาจากสแต็คการโทร

18:56.910 --> 19:02.900
และอีกครั้งที่เราใช้การติดต่อกลับดังนั้นเราจึงลบออก

19:02.940 --> 19:03.590
เราเสร็จแล้ว

19:03.600 --> 19:09.170
ทุกอย่างว่างเปล่าและเราเพิ่งเรียกใช้สามนี้

19:09.270 --> 19:15.060
มันจะต้องผ่านเหตุการณ์คิวการเรียกกลับเว็บ API ทั้งหมด Lou

19:15.120 --> 19:17.530
แล้วมันจะเรียกใช้บันทึกคอนโซลเป็นจริง

19:17.700 --> 19:19.380
นั่นเป็นข้อมูลจำนวนมาก

19:19.470 --> 19:26.920
ดังนั้นคุณอาจต้องดูว่าสองสามครั้ง แต่หวังว่าจะทำให้คุณเข้าใจว่าทำไมเราสังเกตเห็นพฤติกรรม

19:27.480 --> 19:31.200
และฉันต้องการท้าทายความเข้าใจของคุณที่นี่

19:31.440 --> 19:37.110
รู้ว่าคุณรู้อะไรและฉันแค่บอกคุณว่าจะเกิดอะไรขึ้นถ้าฉันเปลี่ยนเป็นศูนย์

19:37.410 --> 19:39.370
นั่นหมายถึงศูนย์วินาที

19:40.270 --> 19:43.470
ฉันจะให้เวลาคุณคิดสักครู่ว่าจะเกิดอะไร

19:43.600 --> 19:45.510
จากนั้นเราจะลองทำสิ่งนี้

19:45.880 --> 19:54.320
เมื่อฉันล้างคัดลอกคอนโซลและวางสิ่งนี้และเรียกใช้ได้ดีหนึ่งและสาม

19:54.400 --> 19:55.570
คุณเดาถูกมั้ย

19:56.440 --> 19:59.160
ลองคิดดูว่าทำไมถึงเกิดขึ้น

19:59.350 --> 20:04.610
แม้ว่านี่จะเป็นศูนย์วินาทีมันก็ยังคงผ่านกระบวนการ

20:04.690 --> 20:11.970
มันยังคงได้รับการป้อนลงในเว็บ API จากนั้นคิวการติดต่อกลับ

20:12.070 --> 20:19.870
และตามเวลาที่เกิดขึ้นสแต็คการโทรได้ย้ายไปยังคอนโซลวอล์คทรีแล้วและหลังจากคอนโซลล็อก

20:19.870 --> 20:31.410
3 เสร็จสิ้นและสแต็คการโทรว่างเปล่าลูปเหตุการณ์กล่าวว่าใช่แล้วเราสามารถเรียกยกเลิกบันทึกได้ คุณ.

20:31.440 --> 20:41.830
และถ้าคุณสามารถเข้าใจได้ว่าคุณจะมีผู้คนจำนวนมากที่จ้างบทบาทจาวาสคริปต์ถามคำถามเช่นนี้ในการสัมภาษณ์และคุณต้องอธิบายว่าทำไมถึงเป็นเช่นนั้น

20:41.830 --> 20:47.890
ดังนั้นฉันหวังว่ามันสมเหตุสมผลกับคุณและคุณสามารถใช้มันเพื่อประโยชน์ของคุณในการสัมภาษณ์ครั้งต่อไป

20:47.920 --> 20:53.770
ดังนั้นขอปะยางรถ

20:53.980 --> 21:04.370
หากคุณต้องการโหลดทวีตล่าสุดของคุณไปยังหน้าเว็บและคุณทำสิ่งนี้แบบซิงโครนัสผู้เยี่ยมชมเว็บไซต์ของคุณจะไม่สามารถทำอะไรได้จนกว่าจะมีการโหลดทวีต

21:04.630 --> 21:08.690
สิ่งนี้อาจทำให้ล่าช้านานก่อนที่พวกเขาจะได้เห็นเนื้อหาของเว็บไซต์

21:08.710 --> 21:12.610
พวกเขาอาจไม่สามารถคลิกที่ใดก็ได้และหน้านั้นจะรู้สึกเหมือนถูกแช่แข็ง

21:12.760 --> 21:14.620
ไม่ใช่ประสบการณ์การใช้งานที่ดีมาก

21:15.440 --> 21:19.230
อีกวิธีหนึ่งในการคิดเกี่ยวกับสิ่งนี้คือการเรียกครูของคุณด้วยคำถาม

21:20.280 --> 21:23.160
คุณเรียกครูว่าซิงโครนัส

21:23.160 --> 21:31.100
คุณรอโทรศัพท์จนกว่าครูจะรับโทรศัพท์และถามคำถามเขาและหวังว่าจะได้รับคำตอบ

21:31.230 --> 21:33.950
ดังนั้นคุณจึงปล่อยให้โทรศัพท์ดังขึ้นจนกว่าเขาจะหยิบขึ้นมา

21:34.110 --> 21:37.420
แต่คุณไม่ได้ทำอะไรอย่างอื่นในระหว่างนี้

21:37.710 --> 21:41.750
อะซิงโครนัสหมายความว่าคุณส่งข้อความถึงครูพร้อมคำถาม

21:42.030 --> 21:48.450
และเมื่อครูหรือเธอมีเวลาหรือจะตอบคุณและโทรหาคุณด้วยคำตอบเพื่อให้คุณสามารถทำสิ่งอื่น ๆ ในระหว่างจาวาสคริปต์จะไม่ตรงกันเมื่อคุณสามารถฝากข้อความและ

21:48.450 --> 22:00.420
Colback บอกคุณเฮ้นาย

22:00.420 --> 22:00.420
ครูมีข้อความถึงคุณเมื่อคุณไม่ยุ่งเกินไป

22:02.060 --> 22:11.140
และนั่นคือสาเหตุที่เราเรียกมันว่าฟังก์ชั่นการโทรกลับและคิวบ์การโทรกลับที่เราโทรกลับเพื่อแจ้งให้พวกเขารู้ว่าเฮ้มีบางสิ่งรอคุณอยู่

22:11.180 --> 22:16.410
ตอนนี้เราเห็นตรงนี้ว่าเรามีเวลาหมด Dohm Ajax และยังมีอีกหลายอย่าง

22:16.580 --> 22:20.430
แต่คุณยังเห็นในคอลแบ็คว่าคุณมีวงล้อมเมื่อโหลดเสร็จแล้ว

22:20.690 --> 22:25.350
คุณจำผู้ฟังเหตุการณ์ได้ดีด้วยฟังเหตุการณ์

22:25.370 --> 22:32.630
เรามีบางอย่างเช่นองค์ประกอบและเราได้เพิ่มฟังเหตุการณ์

22:33.290 --> 22:47.780
และในเรื่องนี้อาจพูดว่าฟังสำหรับคลิกและคุณจะมีฟังก์ชั่นที่อาจเพียงแค่คลิกคอนโซลบันทึกจะคล้ายกับวิธีการเขียนโปรแกรมแบบอะซิงโครนัส

22:47.790 --> 22:52.110
เราได้สร้างฟังก์ชันคลิกนี้และตอนนี้เราเพิ่งฟัง

22:52.170 --> 22:55.410
และทุกครั้งที่มีการคลิกบนหน้าเว็บ

22:55.440 --> 23:06.210
ดังนั้นใน Dom Well เราเรียกใช้ฟังก์ชัน callback ซึ่ง console log คลิกขวา

23:06.510 --> 23:14.060
ดังนั้นเพื่อให้เสร็จสิ้นเมื่อเกิดเหตุการณ์แบบอะซิงโครนัสมันเกิดขึ้นมากมายเมื่อคุณลองและพูดคุยระหว่างเครื่องจักรเช่นการพูดกับฐานข้อมูลทำให้เครือข่ายร้องขอการประมวลผลภาพอ่านไฟล์และไม่ต้องกังวลเราจะผ่านวิดีโอ

23:14.060 --> 23:23.410
impeach นี้

23:23.690 --> 23:39.410
แต่เพื่อสรุปสิ่งที่เราเพิ่งเรียนรู้จาวาสคริปต์เป็นภาษาเธรดเดี่ยวที่ไม่สามารถบล็อกได้มีหนึ่งสแต็คการโทรและมันทำสิ่งหนึ่งครั้งในแต่ละครั้งเพื่อไม่ให้บล็อกเธรดเดี่ยว

23:39.410 --> 23:48.770
มันสามารถแบบอะซิงโครนัสกับฟังก์ชันการโทรกลับและการกระทำของ Colmar

23:48.770 --> 23:53.740
เหล่านี้จะถูกเรียกใช้ในพื้นหลังผ่านคิวการโทรกลับ

23:53.770 --> 24:00.720
ครั้งต่อไปที่คุณถูกถามความแตกต่างระหว่างซิงโครนัสหรือซิงโครนัส

24:00.940 --> 24:02.830
หรือจาวาสคริปต์ทำงานอย่างไร

24:02.860 --> 24:06.290
คุณควรมีความมั่นใจมากขึ้นในการตอบคำถามนั้น

24:06.690 --> 24:08.340
และฉันหวังว่านี่จะเป็นประโยชน์

24:09.130 --> 24:10.260
ฉันเห็นในวิดีโอหน้า
