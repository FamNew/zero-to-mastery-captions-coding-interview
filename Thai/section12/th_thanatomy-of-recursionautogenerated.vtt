WEBVTT

00:01.110 --> 00:09.220
ทุกฟังก์ชั่นซ้ำต้องมีสิ่งที่เรียกว่ากรณีฐานหรือจุดหยุด

00:09.390 --> 00:26.490
จำตัวอย่างของฉันที่จุดเริ่มต้นที่ฉันแสดงให้คุณเห็นวิธีการตรวจสอบโฟลเดอร์ทั้งหมดซ้ำในโครงการใดโครงการหนึ่งของเราที่เราต้องบอกโปรแกรมเฮ้ถ้าโฟลเดอร์ย่อยนี้เราจะไม่หยุดโฟลเดอร์ใด ๆ อีกต่อไป

00:26.490 --> 00:33.770
ฟังก์ชั่นจะทำงานต่อไป

00:33.940 --> 00:36.790
ดังนั้นฟังก์ชั่นวนซ้ำมีสองเส้นทาง

00:37.570 --> 00:43.730
หนึ่งคือกรณีเรียกซ้ำที่เรียกใช้ฟังก์ชันอีกครั้งและเรียกใช้

00:44.080 --> 00:47.370
จากนั้นเคสหลักที่หยุดเรียกใช้ฟังก์ชัน

00:47.530 --> 00:49.950
ไม่มีอะไรจะเพิ่มเติมในการค้นหา

00:50.000 --> 00:57.350
ดังนั้นเราจะเพิ่มคุณสมบัตินี้ในการบอกฟังก์ชั่นเฮ้เลิกกับคุณว่ามันไร้สาระตอนนี้คุณต้องหยุด

00:57.830 --> 01:00.920
ทีนี้เราสามารถทำอะไรแบบนี้

01:01.040 --> 01:04.610
เราสามารถสร้างตัวนับและเราจะบอกว่าตัวนับนี้เป็นศูนย์

01:06.960 --> 01:21.390
และเราสามารถเพิ่มคำสั่งแบบมีเงื่อนไขจะบอกว่าถ้าตัวนับมากกว่า 3 ในกรณีนั้นก็แค่ย้อนกลับเสร็จสิ้น

01:24.480 --> 01:27.100
มิฉะนั้นเราจะเรียกการลงทะเบียนเรียน

01:27.110 --> 01:31.360
แต่เราต้องการเพิ่มตัวนับด้วย 1

01:31.390 --> 01:44.340
ดังนั้นถ้าฉันคลิกเรียกใช้ที่นี่ฉันต้องเรียกใช้ฟังก์ชั่นก่อนสมมติว่ามีการลงทะเบียนถ้าฉันเรียกใช้ฟังก์ชันนี้ทันที

01:45.210 --> 01:46.360
หยุดวิดีโอชั่วคราว

01:46.360 --> 01:56.700
ลองคิดดูสิเพราะฉันจะคลิกวิ่งในแบบสามต่อหนึ่งที่ฉันไม่ได้กำหนด

01:56.870 --> 02:00.220
นั่นคือสิ่งที่คุณคาดหวัง

02:00.350 --> 02:24.610
เพื่อแสดงให้คุณเห็นบางสิ่งบางอย่างถ้าฉันใส่ความคิดเห็นรหัสนี้และเราเพียงแค่ทำ Inception นี้ที่เราเพียงแค่เรียกการลงทะเบียนก่อตั้งและอาจทำคอนโซลบันทึกที่นี่ว่าสวัสดีและฉันคลิกวิ่ง

02:24.800 --> 02:43.280
เรารู้โดยดูที่ฟังก์ชั่นนี้รุ่นนี้ฟังก์ชั่นที่มันจะไม่ได้ไปที่บันทึกคอนโซลเพราะทันทีที่มันกระทบกับบรรทัดแรกของฟังก์ชั่นมันจะย้อนกลับไปและพูดว่า ไปที่นี่เป็นเพียงการตีกลับไปมาไม่เคยได้รับการบันทึกคอนโซล

02:43.580 --> 02:46.000
แต่ถ้าเรากลับไปที่สิ่งที่เรามีมาก่อน

02:46.400 --> 02:50.040
ฟังก์ชั่นของเราได้สิ้นสุดลงอย่างชัดเจน

02:50.060 --> 02:58.860
มันไม่ได้ทำล้นมากเกินไปและ ณ จุดหนึ่งก็สิ้นสุดลงเพราะเราเพิ่มตัวนับ

02:58.900 --> 03:05.960
ดังนั้นให้ฉันดูบันทึกทั้งหมดที่นี่เป็นเคาน์เตอร์และตรวจสอบให้แน่ใจว่างาน

03:06.100 --> 03:12.670
ถ้าฉันคลิก run ฉันจะได้ 0 0 2 3 4 เมื่อมันมาถึง 4

03:12.670 --> 03:15.160
ตัวนับมากกว่า 3

03:15.430 --> 03:17.510
เรากลับมาแล้ว

03:17.650 --> 03:20.860
แต่ทำไมไม่มีทำที่นี่

03:22.200 --> 03:26.610
และนี่เป็นภาพประกอบที่ยอดเยี่ยมเกี่ยวกับวิธีการเรียกซ้ำ

03:26.670 --> 03:34.600
ฉันจะคัดลอกรหัสนี้และกลับไปที่เบราว์เซอร์ของเราที่นี่

03:34.750 --> 03:53.690
ให้ฉันรีเฟรชหน้านี้เพื่อให้แน่ใจว่าคุณมีตัวแปรทั่วโลกที่ชัดเจนและฉันจะคัดลอกและวางลงทะเบียนในเวลานี้ฉันจะเพิ่มคำหลักดีบักเกอร์เพื่อให้เราสามารถดีบักรหัสของเราและไปทีละขั้น มัน.

03:55.340 --> 04:00.750
มาเริ่มกันเลยและดูว่าเกิดอะไรขึ้น

04:00.750 --> 04:04.680
เอาล่ะเรากลับไปที่ดีบั๊กของเรา

04:04.730 --> 04:06.860
เราเห็นว่าเรามีสแต็คการโทรที่นี่

04:06.860 --> 04:14.720
ฉันเพิ่งถูกเรียกจากฉันและฉันก็เปิดแท็บเล็ก ๆ ที่เรียกว่าขอบเขตสำหรับกรณีของเรา

04:14.740 --> 04:19.740
เราต้องการเปิดขอบเขตของสคริปต์

04:19.940 --> 04:28.500
มันแสดงให้เราเห็นว่าเรามีตัวแปรอะไรบ้างในกรณีนี้เรามีตัวนับซึ่งเป็นของคุณ

04:28.640 --> 04:29.610
ดังนั้นฉันจะคลิก

04:29.630 --> 04:36.460
ก้าวข้ามไปและจะบอกว่าเฮ้เรามีตัวนับเท่ากับศูนย์

04:36.470 --> 04:38.130
มีค่ามากกว่าสาม

04:38.160 --> 04:45.140
ไม่ฉันจะข้ามเคาน์เตอร์ Inkerman และเรียกใช้และแยกเราเห็นว่ามันเกิดขึ้น

04:46.050 --> 04:51.770
ตัวนับได้เพิ่มขึ้นเนื่องจากเราผ่านบรรทัดนี้และตอนนี้เราไปที่ Inception

04:51.810 --> 04:56.510
เราจะเรียกใช้ฟังก์ชั่นอีกครั้งและคุณจะสังเกตเห็นว่าสแต็คการโทรเมื่อฉันคลิกสิ่งนี้จะเพิ่มขึ้นและเราจะไปอีกครั้งหนึ่งประเทศในขณะนี้หนึ่ง

04:59.390 --> 05:05.670
Nope ไม่ส่งคืนสิ่งใด

05:05.750 --> 05:09.460
คุณจะเห็นตัวนับไปที่สองและเราจะเริ่มต้นอีกครั้ง

05:10.590 --> 05:23.230
และเรายังคงเดินหน้าต่อไปอีกครั้งผ่านคอนนาร์ดกลายเป็นการเพิ่มสามครั้งลงไปในสแต็ก

05:23.230 --> 05:27.420
ดังนั้นเราจึงเพิ่มการโทรเข้าไปในกองซ้อนอีกครั้ง

05:27.580 --> 05:37.760
ตอนนี้เรามีตัวนับจำนวนมากเหล่านี้ที่สี่และจากนั้นเราก้าวไปที่นี่ตัวนับตอนนี้คือสี่ซึ่งมากกว่าสาม

05:37.780 --> 05:43.210
ในที่สุดเราก็จะเข้าสู่เงื่อนไขว่าจะกลับมาทำอะไรให้เรา

05:43.270 --> 05:44.690
มาดูกันว่าเกิดอะไรขึ้นที่นี่

05:44.710 --> 05:46.590
ฉันจะคลิกต่อไป

05:48.650 --> 05:52.280
และฉันคลิกถัดไปอีกครั้ง

05:52.310 --> 05:53.330
ดูนั่นสิ

05:53.480 --> 06:00.520
เรามีตัวแปรโลคอลในตอนนี้ที่ส่งคืนค่าเสร็จแล้ว

06:00.540 --> 06:17.070
ตอนนี้เรากลับมาเรียบร้อยแล้วและเราจะไม่เรียกการลงทะเบียนอีกต่อไปตอนนี้สแตกการโทรกำลังจะเริ่มเปิดฟังก์ชั่นเหล่านี้เพราะมันจะบอกว่าโอ้เรามีคำหลักคืน

06:17.170 --> 06:22.020
ฉันจะหยุดสิ่งที่ฉันทำที่ด้านล่างที่นี่และกลับจากฟังก์ชั่นนี้

06:22.060 --> 06:28.020
ดังนั้นฟังก์ชั่นการลงทะเบียนนี้จะได้รับผลตอบแทน แต่สังเกตว่าเกิดอะไรขึ้น

06:31.070 --> 06:38.390
แม้ว่าฉันจะได้รับผลตอบแทนที่ไม่ได้กำหนด Azari popped รายการด้านบนจากการเริ่มต้นจากสแต็คการโทรและถ้าฉันเก็บสิ่งต่าง

06:38.770 --> 06:46.010
ๆ จากสแต็คการโทร

06:46.170 --> 06:48.590
และนั่นคือเหตุผลที่เราได้รับ

06:48.800 --> 06:50.870
ตอนนี้ทำไมถึงเป็นอย่างนั้น

06:51.230 --> 07:11.500
ถ้าเรากลับไปที่ฟังก์ชั่นของเราอย่างที่คุณเห็นก็คือเราทำสิ่งนี้เป็นหลักเราเรียกว่าการลงทะเบียนครั้งหนึ่งสองครั้งสามครั้ง

07:11.720 --> 07:15.910
และภายในที่นี่เมื่อเรามาถึงที่นี่ในที่สุดเราก็บอกว่าโอ้กลับมาแล้ว

07:16.130 --> 07:27.420
ดังนั้นฟังก์ชั่นการลงทะเบียนนี้จะเปลี่ยนเป็นสีน้ำตาลแล้วเราไปที่ฟังก์ชันนี้

07:27.430 --> 07:41.530
ทีนี้ปัญหาเกี่ยวกับเรื่องนี้และฉันรู้ว่ามันน่าสับสนคือเมื่อเรากลับมาเมื่อเราโผล่ออกมาจากกองและตอนนี้เราอยู่ในส่วนของการลงทะเบียนเรียน

07:41.850 --> 07:46.270
เมื่อฟังก์ชั่นไม่ส่งคืนสิ่งใดก็แค่ส่งคืนเพื่อค้นหา

07:46.290 --> 07:49.570
ดังนั้นเราต้องบอกให้มันทำแบบนี้ต่อ

07:50.070 --> 07:53.400
และทำให้ฟองขึ้นไปจนสุด

07:53.820 --> 07:58.320
และนี่คือสิ่งที่คุณต้องจำไว้ด้วยการสอบถามซ้ำ

07:58.410 --> 08:05.990
โดยปกติจะมีตัวพิมพ์เล็กและคุณต้องการให้แน่ใจว่าคุณจะกลับมาเพื่อให้ค่าที่คุณต้องการได้รับการ bubbled

08:05.990 --> 08:09.860
ขึ้นตลอดทางที่จะพูดคุย

08:09.890 --> 08:19.490
ในกรณีของเราสิ่งที่เราต้องทำก็คือพูดว่า return inception

08:19.490 --> 08:27.200
วิธีนี้การลงทะเบียนเรียนรู้ที่จะคืนสิ่งที่มันเกิดขึ้นมา

08:27.500 --> 08:31.580
เป็นต้นไปเรื่อย ๆ จนกว่าเราจะกลับมาเสร็จ

08:31.580 --> 08:33.160
เรียกใช้อีกครั้ง

08:34.850 --> 08:35.030
เอาล่ะ

08:35.180 --> 08:45.980
และฉันต้องเรียกฟังก์ชั่นนี้เพื่อเริ่มและเรียกใช้อีกครั้งและเราก็ทำได้ดีมาก

08:45.980 --> 08:53.730
ถ้าฉันกลับไปที่นี่และกลับไปที่ข้อเสีย ฉันขอแนะนำให้คุณลองใช้งานในครั้งนี้เพิ่มคำหลักที่ส่งคืนไปยัง

08:53.730 --> 08:58.780
Inception และเรียกใช้ผ่านโปรแกรมดีบั๊กเพื่อดูว่าเกิดอะไรขึ้น

08:59.970 --> 09:05.130
แต่สิ่งที่ฉันเพิ่งแสดงให้คุณเห็นคือทั้งหมดที่คุณต้องสร้างฟังก์ชั่นวนซ้ำ

09:05.130 --> 09:07.140
คุณมีกฎสามข้อ

09:07.170 --> 09:21.460
หนึ่งคือการระบุกรณีฐานที่สองคือการระบุกรณีซ้ำ

09:21.500 --> 09:26.520
เราได้ระบุกรณีฐานไปแล้วเพื่อหยุดกรณีเรียกซ้ำ

09:26.540 --> 09:30.080
นั่นคือเมื่อ Konner น้อยกว่าสามคน

09:30.180 --> 09:41.510
และในที่สุดขั้นตอนที่สามของเราคือการเข้ามาใกล้และกลับคืนมาเมื่อจำเป็น

09:42.210 --> 09:58.330
และโดยปกติแล้วคุณจะได้รับผลตอบแทนสองรายการสำหรับเคสพื้นฐานและเคสที่เรียกซ้ำเนื่องจากคุณต้องการส่งคืนบางอย่างที่ส่วนท้ายของฟังก์ชัน

09:58.430 --> 10:01.000
งั้นลองคอมเม้นท์กัน

10:01.010 --> 10:09.580
เรามีความคิดว่าการเรียกใช้ซ้ำเกิดขึ้นได้อย่างไรฟังก์ชั่นนั้นจะเข้ามาใกล้และใกล้เคียงกับกรณีพื้นฐาน

10:09.740 --> 10:18.350
และเมื่อถึงกรณีพื้นฐานในที่สุดมันก็กลับมาและปรากฏฟังก์ชั่นออกจากสแต็ก แต่นั่นก็เพียงพอแล้วสำหรับฉัน

10:18.350 --> 10:24.500
ฉันคิดว่าถึงเวลาแล้วที่เราจะทำแบบฝึกหัดการเขียนโปรแกรมเพื่อทำความคุ้นเคยกับหัวข้อนี้

10:24.530 --> 10:25.830
ฉันจะดูในถัดไป

10:26.180 --> 10:26.420
Babai
