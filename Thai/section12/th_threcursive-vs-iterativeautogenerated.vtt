WEBVTT

00:01.510 --> 00:21.450
ยินดีต้อนรับกลับมามีทฤษฎีที่ระบุว่าอะไรก็ตามที่สามารถนำไปใช้ซ้ำได้สามารถนำไปใช้แบบโต้ตอบได้นั่นคือคุณสามารถใช้ชีวิตทั้งชีวิตได้โดยไม่ต้องทำหน้าที่ซ้ำ ๆ

00:21.880 --> 00:22.420
ตกลง.

00:22.620 --> 00:29.650
เหตุใดเราจึงต้องการสร้างความสับสนให้ตัวเองด้วยหัวข้ออย่างการเรียกซ้ำซึ่งอาจทำให้สับสน

00:30.870 --> 00:37.550
สำหรับปัญหาบางอย่างมันง่ายกว่าในการเขียน แต่ขึ้นอยู่กับสถานการณ์

00:37.560 --> 00:40.990
โปรดทราบว่ามีสองตัวเลือกเสมอ

00:41.100 --> 00:52.770
และตอนนี้คุณรู้แล้วว่าการเขียนโปรแกรมมีข้อดีและข้อเสียเสมอและวิศวกรที่ดีก็คือคนที่สามารถตัดสินใจได้อย่างถูกต้องตามข้อดีข้อเสียเหล่านั้น

00:52.940 --> 01:06.730
แต่ฉันต้องการเก็บไว้ในใจสำหรับการสัมภาษณ์เพราะผู้สัมภาษณ์จะขอให้คุณแก้ปัญหาและปัญหาที่สามารถแก้ไขได้ด้วยการสอบถามซ้ำมักจะสามารถแก้ไขได้ด้วย

01:09.770 --> 01:24.330
และดูที่ฟังก์ชั่นฟีโบนักชีของเรานี่เป็นตัวอย่างที่ง่ายกว่าของการเรียกซ้ำ แต่มีบางครั้งที่การเรียกซ้ำสามารถทำให้โค้ดของคุณแห้ง

01:24.330 --> 01:26.360
นั่นคืออย่าทำซ้ำตัวเอง

01:26.430 --> 01:34.340
กฎข้อใหญ่เมื่อพูดถึงการเขียนโปรแกรมและมีปัญหามากมายเมื่อพูดถึงการเรียกซ้ำเนื่องจากการใช้งานแบบเรียกซ้ำนั้นยากขึ้นเรื่อย

01:34.340 --> 01:48.050
ๆ ทำให้โค้ดของคุณอ่านง่ายขึ้น

01:48.540 --> 01:57.670
และฉันลำเอียงเล็กน้อยเพราะถึงแม้ว่าการเรียกซ้ำเป็นเทคนิคที่ทรงพลังในความคิดของฉันมันไม่ใช่วิธีที่ดีที่สุดเสมอไป

01:57.780 --> 02:14.750
ดังนั้นคุณต้องตรวจสอบให้แน่ใจเพราะสาเหตุหรือข้อเสียเปรียบหลักที่แม้ว่าการเรียกซ้ำสามารถทำให้โค้ดของคุณแห้งและทำให้โค้ดของคุณอ่านง่ายขึ้น แต่ยังสร้างรอยเท้าหน่วยความจำเพิ่มเติมนี้

02:16.020 --> 02:23.190
เพราะทุกครั้งที่เราเพิ่มฟังก์ชั่นในการเรียกสแต็คมันจะเพิ่มหน่วยความจำชิ้นพิเศษ

02:23.430 --> 02:39.460
ดังนั้นคุณมีกรณีที่คุณสามารถรับล้นสแต็คหรือหากระบบของคุณมีหน่วยความจำราคาแพงคุณต้องการหลีกเลี่ยงการโทรซ้ำซ้ำหลายครั้งมากเกินไปและสำหรับบางคนการเรียกซ้ำเป็นสิ่งที่ยากต่อการห่อหุ้มจิตใจ

02:39.500 --> 02:46.870
และถ้าเรามีทีมวิศวกรหนุ่มสาวของนักพัฒนาที่คุ้นเคยกับการเรียกซ้ำซึ่งอาจไม่ใช่ตัวเลือกที่ดีที่สุด

02:47.880 --> 03:00.510
แต่ข้อเสียเปรียบหลักคือวิธีการวนซ้ำมักจะมีประสิทธิภาพมากกว่าเพราะพวกเขาไม่ทำการเรียกฟังก์ชั่นเพิ่มเติมเหล่านี้ซึ่งใช้พื้นที่สแต็กโดยมีข้อเสียคือการแก้ปัญหาซ้ำ

03:00.510 --> 03:17.520
ๆ อาจไม่สามารถอ่านได้และกฎที่ฉันชอบติดตาม คือฉันชอบใช้การเรียกซ้ำเมื่อคุณทำงานกับโครงสร้างข้อมูลที่คุณไม่แน่ใจจริงๆว่าอยู่ลึกแค่ไหนซึ่งคุณไม่ทราบว่าจะต้องวนซ้ำกี่ครั้ง

03:17.650 --> 03:26.670
และอย่างที่คุณเห็นการเรียกซ้ำเป็นประโยชน์อย่างยิ่งสำหรับสิ่งต่าง ๆ เช่นโครงสร้างข้อมูลแบบต้นไม้และการสำรวจเส้นทางเพราะมักจะเป็นเช่นนั้น

03:27.770 --> 03:34.520
ตอนนี้ในวิดีโอหน้าฉันอยากพูดถึงหัวข้อนี้ลึกขึ้นอีกนิดและใช้การสอบถามซ้ำ

03:34.640 --> 03:37.500
แต่ฉันต้องการชี้สิ่งหนึ่งอย่างรวดเร็ว

03:38.380 --> 03:43.210
มีบางสิ่งที่เรียกว่าการเพิ่มประสิทธิภาพการโทรหางในหลายภาษา

03:43.220 --> 03:51.510
และตัวอย่างเช่นใน Javascript ที่มี 6 อนุญาตให้เรียกซ้ำได้โดยไม่ต้องเพิ่ม call stack

03:51.560 --> 03:58.500
คุณสามารถอ่านเพิ่มเติมเกี่ยวกับเรื่องนี้ได้ในแหล่งข้อมูลที่ให้ไว้ในวิดีโอนี้ แต่เป็นภาษาอื่นเช่นกัน

03:58.510 --> 04:03.770
มีวิธีการเขียนการสอบถามซ้ำดังนั้นจึงมีหน่วยความจำที่มีประสิทธิภาพมากขึ้น

04:03.940 --> 04:15.070
ดังนั้นปัญหาสแต็คขนาดใหญ่นี้สามารถแก้ไขได้จริงระหว่างการผลิต แต่เรามาพูดถึงคำแนะนำที่ชัดเจนว่าควรใช้การเรียกซ้ำในวิดีโอถัดไปเมื่อใด
