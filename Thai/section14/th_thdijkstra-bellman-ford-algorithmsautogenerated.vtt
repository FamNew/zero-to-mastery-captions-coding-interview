WEBVTT

00:01.110 --> 00:01.910
ยินดีต้อนรับกลับ.

00:02.170 --> 00:13.250
ฉันต้องการพูดถึงปริศนาชิ้นสุดท้ายโดยเฉพาะอย่างยิ่งเมื่อพูดถึงกราฟแม้ว่าเราจะได้พูดคุยเกี่ยวกับการสำรวจกราฟจนถึงตอนนี้

00:13.390 --> 00:18.340
และการกลับรายการ Treach ก็ใช้ DFS และ DFS

00:18.370 --> 00:31.100
นอกจากนี้ยังมีอีกเรื่องที่คุณควรพิจารณาในการสัมภาษณ์ตอนนี้คุณน่าจะใช้อัลกอริธึมเหล่านี้มากเพราะมันซับซ้อนมากและใช้เวลานาน

00:31.150 --> 00:39.040
อย่างไรก็ตามผู้สัมภาษณ์อาจคาดหวังให้คุณรู้เกี่ยวกับพวกเขาและรู้ว่าคุณต้องใช้ Belman Ford หรืออัลกอริทึม

00:39.190 --> 00:44.120
diasters เพื่อหาปัญหาเส้นทางที่สั้นที่สุด

00:44.290 --> 00:45.810
แต่คุณอาจถามตัวเอง

00:46.010 --> 00:52.940
อังเดรคุณเพิ่งบอกฉันว่าการค้นหาแบบกว้างครั้งแรกใช้สำหรับปัญหาเส้นทางที่สั้นที่สุด

00:52.990 --> 00:53.980
ทำไมเราต้องการสิ่งเหล่านี้

00:54.010 --> 00:56.790
X แน่ใจว่าอัลกอริทึมฉันรู้แล้วว่าจะทำอย่างไร

00:56.980 --> 01:00.090
และนี่เป็นกรณีพิเศษ

01:00.220 --> 01:11.960
คุณเห็นความกว้างในการค้นหาครั้งแรกนั้นยอดเยี่ยมสำหรับปัญหาเส้นทางที่สั้นที่สุด แต่มีสิ่งหนึ่งที่สามารถทำได้สมมติว่าแต่ละการกระโดดไปยังโหนดอื่นในกราฟ

01:11.960 --> 01:22.240
ถ้าเรากลับไปที่นี่มันจะสันนิษฐานว่าแต่ละเส้นทางมีน้ำหนักเท่ากันกับการค้นหาความลึกก่อน

01:22.340 --> 01:29.590
การค้นหาครั้งแรกเราไม่สนใจว่าจะมีน้ำหนักแบบไหน

01:29.730 --> 01:37.670
ตัวอย่างเช่นในชีวิตจริงเช่น Google Maps ถนนบางสายเร็วกว่าถนนอื่น ๆ

01:37.770 --> 01:38.790
ขวา.

01:38.890 --> 01:44.730
เราอาจมีปริมาณการใช้ข้อมูลมากขึ้นบนถนนสายหนึ่งอาจจะห่างจากโน้ตหนึ่งไปอีกโน้ตหนึ่ง

01:44.740 --> 01:53.420
มันสั้นกว่ากราฟอื่น ๆ และกราฟถ่วงน้ำหนักเหล่านี้ที่เราพูดคุยกันนั้นมีจำนวนที่เกี่ยวข้องกับขอบของมัน

01:53.440 --> 02:07.990
โปรดจำไว้ว่าโหนดเรียกว่าจุดยอดในกราฟและการเชื่อมต่อระหว่างสองโหนดคือการค้นหาที่ขอบและความลึกก่อนไม่อนุญาตให้เราคำนึงถึงน้ำหนักเหล่านี้

02:08.020 --> 02:09.870
เราต้องการสิ่งอื่น

02:10.150 --> 02:16.150
และในการสัมภาษณ์ถ้ามีคนถามคุณว่าคำตอบของคุณควรเป็น Belman

02:16.180 --> 02:27.180
Ford หรืออัลกอริทึม diasters ที่ช่วยให้เราค้นหาเส้นทางที่สั้นที่สุดระหว่างสองบันทึกของกราฟถ่วงน้ำหนักตอนนี้ Belman

02:27.180 --> 02:35.640
และ dicer เป็นคนจริงสองคนที่เป็นนักวิชาการ เกิดอัลกอริทึมของตนเองขึ้นมาเพื่อแก้ปัญหาเส้นทางที่สั้นที่สุดของวิธีการขุดเช่น

02:35.850 --> 02:41.910
Google Maps

02:41.940 --> 02:46.140
พยายามที่จะหาวิธีที่ใกล้เคียงที่สุดที่คุณจะได้รับเบอร์ริโตของคุณ

02:46.140 --> 02:48.660
และเป็นเพียงแค่ความสนุกด้านบันทึกความจริง

02:48.720 --> 02:51.060
นี่คือ Richard Belman

02:51.360 --> 02:58.880
และเป็นบุคคลเดียวกันกับที่เขียนเกี่ยวกับการเขียนโปรแกรมแบบไดนามิกซึ่งเป็นส่วนที่จะเกิดขึ้นในหลักสูตรของเรา

02:58.890 --> 03:02.060
สมมุติว่าทั้งสองคนฉลาดมาก ๆ

03:03.370 --> 03:11.110
ตอนนี้อัลกอริธึมทั้งสองนี้ค่อนข้างซับซ้อนและใช้เวลานานมากในการเข้ารหัส

03:11.290 --> 03:22.380
ดังนั้นฉันจะปล่อยให้ทรัพยากรสำหรับคุณถ้าคุณต้องการเรียนรู้เพิ่มเติมเกี่ยวกับอัลกอริทึมเหล่านี้เพราะในการสัมภาษณ์มันหายากมากที่คุณจะต้องเขียนโค้ดอัลกอริทึมเหล่านี้

03:22.390 --> 03:26.520
เวลาส่วนใหญ่คุณเพียงแค่ต้องรู้ว่าพวกเขามีอยู่และเมื่อจะใช้พวกเขา

03:26.530 --> 03:36.330
ดังนั้นเรามาดูกันว่าอัลกอริทึม Belman Ford มีประสิทธิภาพมากในการแก้เส้นทางที่สั้นที่สุดเหนืออัลกอริธึม diasters

03:36.360 --> 03:40.070
เพราะมันสามารถรองรับน้ำหนักเชิงลบ

03:40.290 --> 03:51.210
ดังนั้นหากกราฟถ่วงน้ำหนักมีน้ำหนักเป็นลบหรืออัลกอริทึม Belman Ford จำนวนลบจะสามารถแก้ปัญหาเส้นทางที่สั้นที่สุด

03:51.360 --> 03:54.090
ในขณะที่ Daxter จะไม่สามารถทำได้

03:54.170 --> 04:02.980
ทีนี้ทำไมคุณถึงต้องใช้ diasters ถ้าอัลกอรึทึมของ Belman Ford ทำได้ดีกว่าเราจะไม่เข้าสู่คณิตศาสตร์ทั้งหมด

04:03.370 --> 04:12.150
แต่อัลกอรึทึมของเบลแมนฟอร์ดอาจใช้เวลานานในการทำงานในแง่ของความซับซ้อน

04:12.250 --> 04:19.460
กรณีที่เลวร้ายที่สุดสำหรับอัลกอริทึมการส่งต่อ Belman มักจะซับซ้อนเวลาของทั้งหมดและ squit

04:19.810 --> 04:21.720
ดังนั้นมันจึงไม่ค่อยมีประสิทธิภาพ

04:21.730 --> 04:29.020
ในทางตรงกันข้ามอัลกอริธึมของ Diasters

04:29.320 --> 04:35.470
จะเร็วกว่าเล็กน้อยและมีประสิทธิภาพมากขึ้นเล็กน้อยด้วยข้อเสียที่สามารถรองรับการรอเชิงลบระหว่างโหนด

04:35.560 --> 04:43.540
หากผู้สัมภาษณ์แสดงแผนภาพนี้และบอกคุณว่าฉันต้องการหาเส้นทางที่สั้นที่สุดจาก 0 ถึง 4

04:43.960 --> 04:48.320
ในวิธีนี้เพื่อสร้างกราฟให้คุณรู้ว่าทำไมคุณควรพูดถูก

04:48.730 --> 04:50.830
คุณจะใช้อัลกอริทึมใด

04:50.830 --> 04:52.030
คุณจะใช้ลมหายใจ

04:52.150 --> 04:58.130
การค้นหาครั้งแรกอัลกอริทึม Belman Ford หรืออัลกอริทึม diasters

04:58.330 --> 05:03.010
คำตอบก็คืออัลกอริธึมที่ดี

05:03.040 --> 05:05.580
ไม่มีน้ำหนักเชิงลบในกราฟนี้

05:05.590 --> 05:06.610
มันเป็นกราฟน้ำหนัก

05:06.760 --> 05:09.710
ดังนั้น dicer คืออัลกอริทึมกำลังจะแก้ปัญหานั้น
