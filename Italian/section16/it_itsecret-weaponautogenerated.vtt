WEBVTT

00:01.060 --> 00:02.520
Quindi hai inchiodato la tua intervista.

00:02.520 --> 00:05.260
Fino ad ora tutto sta andando bene.

00:05.260 --> 00:06.880
La codifica è andata bene.

00:06.880 --> 00:11.800
Alcune delle domande che ti hanno chiesto sono state preparate per te hanno raccontato le tue storie di eroi.

00:11.800 --> 00:13.780
Tutto va bene.

00:14.260 --> 00:20.920
O a volte le cose non funzionano come previsto e forse non le hai fatte bene nelle

00:21.400 --> 00:29.350
domande di codifica o ti hanno fatto una domanda che non ti aspettavi e le domande non tecniche non si arrenderanno mai.

00:29.350 --> 00:37.050
Prima di tutto perché è molto raro che tu abbia un colloquio perfetto per ricordare che non stai

00:37.080 --> 00:40.500
gareggiando contro il punteggio del 100 percento.

00:40.500 --> 00:45.770
Stai gareggiando contro altri candidati, anche altri candidati ricevono domande.

00:45.810 --> 00:53.010
Ci sono modi in cui puoi migliorare quelle probabilità e assicurarti di farti notare ancora, anche se forse

00:53.250 --> 00:55.030
non hai fatto tutto.

00:55.440 --> 00:58.940
E qui voglio elencare alcune delle mie cose che chiamo armi segrete.

00:58.980 --> 00:59.370
Sì.

00:59.370 --> 01:06.210
Un nome un po 'esagerato, ma penso che se si riescono a trasformare queste conversazioni in

01:06.450 --> 01:10.950
domande penso che migliorerà le possibilità di sbarcare quel lavoro.

01:11.840 --> 01:17.930
Perché quello che sto per mostrarti sono problemi che ho notato molto sul posto di lavoro quando

01:17.930 --> 01:19.470
si tratta di programmatori.

01:19.490 --> 01:28.250
Ci sono un sacco di programmatori davvero fantastici, ma tra di loro ci sono sempre cose che sono problematiche

01:28.280 --> 01:37.070
forse non per noi programmatori, ma per i dirigenti sono i capi CEO e evitando queste insidie comuni puoi

01:37.100 --> 01:42.410
distinguerti e mostrare che non sei uno sviluppatore tipico .

01:43.250 --> 01:45.810
Quindi andiamo su alcuni dei.

01:45.970 --> 01:49.800
Il primo è la semplicità rispetto alla complessità.

01:50.020 --> 01:56.500
È facile come programmatore metterci nelle nostre mani e complicare le cose e trovare

01:56.500 --> 02:04.630
soluzioni davvero interessanti a problemi che forse solo noi capiamo o forse che solo alcuni smart coder

02:04.630 --> 02:05.990
potrebbero capire.

02:06.490 --> 02:11.510
Ma ricorda che il codice e la risoluzione dei problemi riguardano la risoluzione dei problemi per gli altri.

02:11.890 --> 02:18.100
E poiché sappiamo che il codice deve essere leggibile e mantenibile, vuoi dimostrare che sei il

02:18.100 --> 02:22.280
tipo di programmatore che enfatizza la semplicità rispetto alla complessità.

02:22.390 --> 02:28.000
Lavora nella tua conversazione e spiega come, quando hai lavorato a un progetto con i membri

02:28.000 --> 02:34.690
del team, volevi assicurarti che il codice fosse leggibile, in modo da non complicare eccessivamente il problema solo per sembrare

02:34.870 --> 02:36.300
intelligente o intelligente.

02:36.340 --> 02:43.840
Invece ti sei concentrato su un codice leggibile perché hai capito che lavorare in una squadra significa assicurarti che

02:43.840 --> 02:48.440
il codice sia leggibile e mantenibile a lungo dopo averlo scritto.

02:49.400 --> 02:55.520
Questa è una grande cosa da sottolineare in un'intervista perché è raro che qualcuno lo capisca con solo

02:55.910 --> 02:57.700
pochi anni di esperienza.

02:57.710 --> 03:02.830
Questo è qualcosa che molti sviluppatori senior sanno o conoscono i programmatori esperti.

03:03.230 --> 03:07.550
La prossima è una famosa citazione che molte persone devono aver già sentito.

03:07.550 --> 03:11.010
L'ottimizzazione prematura è la radice di tutto il male.

03:11.860 --> 03:17.170
Cerchiamo sempre di ottimizzare il nostro codice per ottimizzare le prestazioni e vedere cosa possiamo fare meglio.

03:17.650 --> 03:25.810
Ma devi lavorare con il tuo tempo limitato che si basa su quanto tempo ho ora quante risorse

03:25.810 --> 03:31.540
ho ora sta facendo un miglioramento dell'1% in termini di prestazioni.

03:31.540 --> 03:36.490
Se sei in grado di dimostrare all'intervistatore che sei il tipo di persona che comprende

03:36.490 --> 03:43.660
il valore del tempo e delle risorse e dei soldi e come sei in grado di lavorare su cose importanti come le

03:43.660 --> 03:45.040
prestazioni che sono grandi.

03:45.040 --> 03:49.290
Senza esserne troppo ossessionato, è una buona cosa.

03:49.300 --> 03:55.420
E ancora qualcosa che molti sviluppatori e programmatori senior conoscono il prossimo è in qualche modo correlato.

03:55.520 --> 03:59.650
Vuoi concentrarti sull'obiettivo generale e non essere miope.

03:59.660 --> 04:01.280
Ora cosa significa miopico.

04:01.490 --> 04:05.730
Myopic significa che ti stai concentrando solo su una cosa.

04:06.510 --> 04:14.790
Quindi ci viene assegnato un problema e tutto ciò a cui teniamo è risolvere il problema e iniziamo a ignorare alcune altre

04:15.060 --> 04:18.190
cose che potrebbero essere importanti per il progetto.

04:18.240 --> 04:26.580
Ad esempio, un cliente potrebbe avere una scadenza che ha bisogno di un prodotto fuori dalla porta e terminata in una settimana da te

04:27.030 --> 04:32.570
come programmatore che si concentra su un codice veramente buono e una prestazione davvero buona.

04:32.640 --> 04:40.440
Ignorare quella richiesta per una settimana e concentrarsi invece su un codice veramente buono.

04:40.740 --> 04:46.400
E non è necessariamente una brutta cosa, ma devi capire le conseguenze economiche di ciò che

04:46.410 --> 04:46.900
facciamo.

04:47.100 --> 04:51.600
E quando lavori in un'azienda o per te o come freelance, vuoi guardare l'obiettivo

04:51.600 --> 04:55.690
generale e non concentrarti solo su ciò che pensi sia importante.

04:56.040 --> 05:00.320
Devi capire quali sono le esigenze del progetto e lavorare con loro.

05:00.480 --> 05:05.400
E ancora, se sei in grado di dimostrarlo e farlo funzionare nella conversazione come

05:05.400 --> 05:12.960
dire qualcosa come un cliente ha chiesto di consegnare un prodotto prima della loro grande conferenza, sapevo che era una cosa

05:12.960 --> 05:13.980
molto importante.

05:13.980 --> 05:21.180
Così ho organizzato un incontro con il mio team per assicurarmi che quella fosse la nostra priorità numero uno e che avremmo potuto

05:21.180 --> 05:22.550
sempre refactoring del codice.

05:22.560 --> 05:27.780
E in realtà dedichiamo tempo dopo la conferenza per una settimana in cui ci occuperemo del

05:27.780 --> 05:33.480
nostro codice, ma ci siamo assicurati che la prima cosa che abbiamo fatto fosse assicurarsi che siamo in grado

05:33.480 --> 05:39.600
di rispettare la scadenza che il cliente desidera perché il client fornisce l'obiettivo generale di un progetto e un cliente

05:39.600 --> 05:45.750
felice significa che siamo in grado di continuare a lavorare ancora con loro dimostrando che non sei uno sviluppatore tipico

05:45.750 --> 05:52.340
a cui viene assegnato un compito e che tutto ciò su cui ti concentri è capire le esigenze generali del tuo compiti.

05:52.340 --> 05:58.700
Questo è un altro molto comune, specialmente tra i programmatori come noi, dove tendiamo a

05:58.700 --> 06:04.180
lamentarci dei brutti codici dei clienti, magari colleghi che possono diventare frustranti.

06:04.190 --> 06:07.210
Prima di tutto che di solito non aiuta mai.

06:07.640 --> 06:11.660
Ma crea anche un ambiente molto tossico sul posto di lavoro.

06:11.660 --> 06:16.340
Nessuno vuole lavorare con qualcuno che si lamenta tutto il tempo che crea questa energia negativa.

06:16.340 --> 06:21.680
E se sei in grado di parlare con il tuo intervistatore e in che modo sei il tipo di

06:21.680 --> 06:27.680
persona che lavora a tuo agio con i clienti in quanto non ti piace lamentarti o essere negativo nei confronti dei colleghi

06:28.280 --> 06:32.900
o dei capi, questo ti fa immediatamente risaltare perché sei una persona piacevole con cui lavorare.

06:32.960 --> 06:37.440
E questa è una cosa difficile da mettere in una conversazione in un'intervista.

06:37.610 --> 06:44.000
Ma ci sono modi per farlo, come le tue esperienze passate in cui potresti aver dimostrato questi valori.

06:44.360 --> 06:46.440
E poi finalmente questo è un grande.

06:46.490 --> 06:47.460
Nessun ego.

06:47.630 --> 06:55.400
Quando scriviamo il codice o quando programmiamo quando risolviamo i problemi siamo orgogliosi del nostro lavoro e quando sottoponiamo qualcosa come una richiesta

06:55.400 --> 07:00.950
scarsa o qualcuno controlla il nostro codice e ci fanno commenti potremmo sentirci un po 'feriti da

07:00.950 --> 07:07.010
questi commenti perché noi sentiamo che non siamo perfetti che abbiamo commesso degli errori e che molta attenzione

07:07.220 --> 07:10.500
può formarsi nei luoghi di lavoro quando ciò accade.

07:10.580 --> 07:12.580
È un grosso problema per le aziende.

07:12.770 --> 07:18.860
Ma se sei il tipo di programmatore a cui piace ricevere feedback che richiede critiche costruttive e capisce che non

07:18.860 --> 07:21.360
c'è ego qui lavoriamo come una squadra.

07:21.370 --> 07:27.980
Non esiste un individuo e l'obiettivo generale di un'azienda o di un progetto è ciò che conta e

07:27.980 --> 07:34.890
sei in grado di dimostrare che è immediatamente una grande vendita o che ti rende uno sviluppatore di grande valore.

07:35.210 --> 07:42.140
E se sei in grado di fare tutte queste cose qui che ti fanno davvero risaltare.

07:42.170 --> 07:48.350
Posso parlare per esperienza come quando assumo sviluppatori e lavoro in alcune grandi aziende che

07:48.350 --> 07:49.600
sono davvero rari.

07:49.700 --> 07:57.290
Avere uno sviluppatore che li comprenda ed è a proprio agio con questi punti è molto molto prezioso e per

07:57.500 --> 08:01.210
lo più li vedi solo con gli sviluppatori senior.

08:01.280 --> 08:05.380
Quindi questa è la tua arma segreta se sei in grado di lavorare in conversazione.

08:05.450 --> 08:09.110
Ti darà davvero quei punti in più con l'intervistatore.

08:09.280 --> 08:10.990
Vedrò nel prossimo ma da.
