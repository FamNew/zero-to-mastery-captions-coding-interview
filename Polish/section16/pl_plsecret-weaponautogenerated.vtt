WEBVTT

00:01.060 --> 00:02.520
Więc przygwoździłeś wywiad.

00:02.520 --> 00:05.260
Do tej pory wszystko idzie dobrze.

00:05.260 --> 00:06.880
Kodowanie poszło dobrze.

00:06.880 --> 00:11.800
Niektóre z pytań, na które cię prosili, były dla ciebie przygotowane, opowiadały twoje historie o bohaterach.

00:11.800 --> 00:13.780
Wszystko jest dobrze.

00:14.260 --> 00:20.920
Czasem nie wszystko przebiega zgodnie z oczekiwaniami i być może nie zadowalało Cię to dobrze

00:21.400 --> 00:29.350
w pytaniach o kodowanie lub zadawało ci pytanie, którego nie oczekiwałeś, a pytania nietechniczne nigdy się nie poddadzą.

00:29.350 --> 00:37.050
Przede wszystkim dlatego, że bardzo rzadko zdarza się, że masz doskonały wywiad, pamiętaj, że

00:37.080 --> 00:40.500
nie konkurujesz ze 100-procentowym wynikiem testu.

00:40.500 --> 00:45.770
Konkurujesz z innymi kandydatami, także z innymi kandydatami.

00:45.810 --> 00:53.010
Są sposoby, dzięki którym możesz poprawić te szanse i upewnić się, że nadal się wyróżniasz, nawet jeśli

00:53.250 --> 00:55.030
nie wszystko robiłeś.

00:55.440 --> 00:58.940
I tutaj chcę wymienić niektóre z moich, które nazywam tajną bronią.

00:58.980 --> 00:59.370
Tak.

00:59.370 --> 01:06.210
Trochę przesadzam z nazwą, ale myślę, że jeśli potrafisz przerobić te wątki na pytania, myślę,

01:06.450 --> 01:10.950
że poprawi to twoje szanse na wygranie tej pracy.

01:11.840 --> 01:17.930
Bo to, co zaraz pokażę, to problemy, które zauważyłem wiele w miejscu pracy, jeśli

01:17.930 --> 01:19.470
chodzi o programistów.

01:19.490 --> 01:28.250
Jest mnóstwo naprawdę świetnych programistów, ale wśród nich zawsze są rzeczy, które są typowe, problematyczne być

01:28.280 --> 01:37.070
może nie dla nas programistów, ale dla szefów szefów menedżerów i unikanie tych typowych pułapek, które można

01:37.100 --> 01:42.410
wyróżnić i pokazać, że nie jesteś typowym deweloperem .

01:43.250 --> 01:45.810
Przejrzyjmy niektóre z nich.

01:45.970 --> 01:49.800
Pierwszy to prostota nad złożonością.

01:50.020 --> 01:56.500
Bardzo łatwo jako programista dostać się w swoje ręce i komplikować rzeczy i

01:56.500 --> 02:04.630
wymyślić naprawdę ciekawe rozwiązania problemów, które być może tylko rozumiemy, a może tylko kilku inteligentnych programistów

02:04.630 --> 02:05.990
może zrozumieć.

02:06.490 --> 02:11.510
Pamiętaj jednak, że kodowanie i rozwiązywanie problemów polega na rozwiązywaniu problemów dla innych.

02:11.890 --> 02:18.100
A ponieważ wiemy, że kod musi być łatwy do odczytania, chcesz pokazać, że jesteś

02:18.100 --> 02:22.280
typem programisty, który kładzie nacisk na prostotę i złożoność.

02:22.390 --> 02:28.000
Podczas pracy nad konwersacją pracuj nad tym, jak pracujesz nad projektem z

02:28.000 --> 02:34.690
członkami zespołu, który chciałeś się upewnić, że kod był czytelny, że nie komplikowałeś problemu, by wyglądać

02:34.870 --> 02:36.300
sprytnie lub sprytnie.

02:36.340 --> 02:43.840
Zamiast tego skoncentrowałeś się na czytelnym kodzie, ponieważ zrozumiałeś, że praca w zespole oznacza sprawdzenie, czy kod

02:43.840 --> 02:48.440
jest czytelny i możliwy do utrzymania jeszcze długo po napisaniu.

02:49.400 --> 02:55.520
Jest to świetna rzecz, o której warto wspomnieć w wywiadzie, ponieważ rzadko zdarza się, aby ktoś to zrozumiał

02:55.910 --> 02:57.700
z zaledwie kilkuletnim doświadczeniem.

02:57.710 --> 03:02.830
Jest to coś, o czym wie wielu starszych programistów lub programistów starszych.

03:03.230 --> 03:07.550
Następny jest słynnym cytatem, który wielu ludzi musiało już usłyszeć.

03:07.550 --> 03:11.010
Przedwczesna optymalizacja jest źródłem wszelkiego zła.

03:11.860 --> 03:17.170
Zawsze staramy się optymalizować wydajność optymalizacji kodu, aby zobaczyć, co możemy zrobić lepiej.

03:17.650 --> 03:25.810
Ale musisz pracować z ograniczonym czasem, który opiera się na tym, ile mam teraz teraz,

03:25.810 --> 03:31.540
ile zasobów mam teraz, aby uzyskać 1-procentową poprawę wydajności.

03:31.540 --> 03:36.490
Jeśli jesteś w stanie wykazać ankieterowi, że jesteś typem osoby, która rozumie

03:36.490 --> 03:43.660
wartość czasu i zasobów oraz pieniędzy i jak możesz pracować nad rzeczami, które mają znaczenie, takimi jak wydajność,

03:43.660 --> 03:45.040
która jest duża.

03:45.040 --> 03:49.290
Bez zbytniej obsesji na tym punkcie to dobrze.

03:49.300 --> 03:55.420
I znowu coś, o czym wiedzą starsi programiści i programiści, jest związane.

03:55.520 --> 03:59.650
Chcesz skupić się na ogólnym celu, a nie być krótkowzrocznym.

03:59.660 --> 04:01.280
Co oznacza krótkowzroczność.

04:01.490 --> 04:05.730
Krótkowzroczność oznacza, że jesteś bardzo wąsko skoncentrowany na jednej rzeczy.

04:06.510 --> 04:14.790
Tak więc dostajemy za zadanie problem i zależy nam tylko na rozwiązaniu tego problemu i zaczynamy ignorować inne rzeczy,

04:15.060 --> 04:18.190
które mogą być ważne dla projektu.

04:18.240 --> 04:26.580
Na przykład klient może mieć termin, w którym produkt musi wyjść na zewnątrz, a skończy się w ciągu tygodnia,

04:27.030 --> 04:32.570
ponieważ programista skupia się na naprawdę dobrym kodzie o naprawdę dobrej wydajności.

04:32.640 --> 04:40.440
Zignorujesz tę prośbę przez tydzień i zamiast tego skupisz się na naprawdę naprawdę dobrym kodzie.

04:40.740 --> 04:46.400
I to niekoniecznie jest złe, ale musisz zrozumieć biznesowe konsekwencje tego, co

04:46.410 --> 04:46.900
robimy.

04:47.100 --> 04:51.600
A kiedy pracujesz w firmie lub dla siebie lub freelancing, chcesz spojrzeć na ogólny

04:51.600 --> 04:55.690
cel, a nie skupić się tylko na tym, co uważasz za ważne.

04:56.040 --> 05:00.320
Musisz zrozumieć, jakie są potrzeby projektu i pracować z nimi.

05:00.480 --> 05:05.400
I znowu, jeśli jesteście w stanie to zademonstrować i popracować nad tym

05:05.400 --> 05:12.960
w rozmowie, na przykład mówiąc, że klient prosił o dostarczenie produktu przed swoją wielką konferencją, wiedziałem, że to bardzo

05:12.960 --> 05:13.980
ważna sprawa.

05:13.980 --> 05:21.180
Dlatego zorganizowałem spotkanie z moim zespołem, aby upewnić się, że jest to nasz priorytet numer jeden i że zawsze

05:21.180 --> 05:22.550
możemy odmienić kod.

05:22.560 --> 05:27.780
I rzeczywiście poświęciliśmy czas po konferencji przez tydzień, w którym opowiadamy o

05:27.780 --> 05:33.480
naszym kodzie, ale upewniliśmy się, że pierwszą rzeczą, którą zrobiliśmy, było upewnienie się, że

05:33.480 --> 05:39.600
jesteśmy w stanie dotrzymać terminu, który klient chce, ponieważ klient zapewnia ogólny cel projektu i zadowolony

05:39.600 --> 05:45.750
klient sprawiają, że jesteśmy w stanie kontynuować pracę z nimi ponownie, pokazując, że nie jesteś typowym

05:45.750 --> 05:52.340
programistą, któremu powierzono zadanie, i że skupiasz się tylko na tym, że rozumiesz ogólne potrzeby swojego zadania.

05:52.340 --> 05:58.700
Jest to kolejna bardzo popularna wśród programistów, takich jak my, na których lubimy

05:58.700 --> 06:04.180
narzekać na klientów brzydkich kodeksów, którzy mogą być frustrującymi współpracownikami.

06:04.190 --> 06:07.210
Przede wszystkim to zwykle nie pomaga.

06:07.640 --> 06:11.660
Ale stwarza także bardzo toksyczne środowisko w miejscu pracy.

06:11.660 --> 06:16.340
Nikt nie chce pracować z kimś, kto narzeka cały czas, że tworzy tę negatywną energię.

06:16.340 --> 06:21.680
A jeśli jesteś w stanie porozmawiać z osobą przeprowadzającą rozmowę kwalifikacyjną i dowiedzieć się, w

06:21.680 --> 06:27.680
jaki sposób jesteś osobą, która czuje się komfortowo z klientami, nie lubisz narzekać lub negatywnie oceniać współpracowników

06:28.280 --> 06:32.900
lub szefów, co natychmiast wyróżnia Cię, ponieważ jest miłą osobą do pracy.

06:32.960 --> 06:37.440
Trudno jest w rozmowie wziąć udział w rozmowie.

06:37.610 --> 06:44.000
Ale są sposoby, aby to zrobić, takie jak twoje przeszłe doświadczenia, w których możesz wykazać te wartości.

06:44.360 --> 06:46.440
I w końcu jest to duża.

06:46.490 --> 06:47.460
Bez ego.

06:47.630 --> 06:55.400
Kiedy piszemy kod lub kiedy programujemy, kiedy rozwiązujemy problemy, jesteśmy dumni z naszej pracy i kiedy przesyłamy coś takiego, jak

06:55.400 --> 07:00.950
kiepska prośba, ktoś sprawdza nasz kod i komentuje go, możemy poczuć się trochę urażeni

07:00.950 --> 07:07.010
tymi komentarzami, ponieważ czujemy, że nie jesteśmy idealni, że popełniliśmy błędy i że w takich sytuacjach

07:07.220 --> 07:10.500
może pojawić się wiele uwagi w miejscu pracy.

07:10.580 --> 07:12.580
To duży problem dla firm.

07:12.770 --> 07:18.860
Ale jeśli jesteś typem kodera, który lubi otrzymywać opinie, które przyjmują konstruktywną krytykę i rozumie, że

07:18.860 --> 07:21.360
nie istnieje ego, pracujemy jako zespół.

07:21.370 --> 07:27.980
Nie ma jednostki i najważniejszy jest ogólny cel firmy lub projektu, a Ty

07:27.980 --> 07:34.890
możesz udowodnić, że od razu jest to duża sprzedaż lub czyni cię bardzo wartościowym deweloperem.

07:35.210 --> 07:42.140
A jeśli jesteś w stanie zrobić to wszystko tutaj, to naprawdę wyróżnisz się.

07:42.170 --> 07:48.350
Mogę mówić z doświadczenia, jak podczas zatrudniania programistów i pracy w dużych firmach, które są

07:48.350 --> 07:49.600
naprawdę rzadkie.

07:49.700 --> 07:57.290
Posiadanie programisty, który je rozumie i jest wygodny w użyciu tych punktów, jest bardzo cenny

07:57.500 --> 08:01.210
i widzisz go głównie u starszych programistów.

08:01.280 --> 08:05.380
Więc to jest twoja tajna broń, jeśli jesteś w stanie zmusić ich do rozmowy.

08:05.450 --> 08:09.110
To naprawdę da ci dodatkowe punkty z prowadzącym wywiad.

08:09.280 --> 08:10.990
Zobaczę w następnym, ale przez.
