WEBVTT

00:00.890 --> 00:13.220
Saatnya untuk struktur data kita berikutnya tabel hash tabel hash atau peta peta hash pada objek kamus peta dipesan ada banyak cara

00:13.610 --> 00:20.750
untuk memanggil struktur data ini dan bahasa yang berbeda memiliki nama yang berbeda

00:20.750 --> 00:26.640
untuk itu dan sedikit variasi pada objek tabel hash.

00:26.660 --> 00:31.970
Sebagai contoh dalam javascript adalah jenis tabel hash.

00:32.000 --> 00:38.180
Alasan saya memulai kursus dengan array dan objek atau tabel hash adalah

00:38.180 --> 00:44.700
karena kedua adalah pertanyaan wawancara paling umum yang akan Anda gunakan dalam pertanyaan pengkodean.

00:45.400 --> 00:50.700
Saya pribadi, saya belum menjadi bagian dari wawancara bahwa Anda tidak harus tahu ini.

00:50.770 --> 00:53.970
Mereka adalah HARUS mutlak sekarang.

00:53.980 --> 01:01.090
Untungnya bagi kami hampir setiap bahasa memiliki tabel hash bawaan seperti halnya array dalam Python.

01:01.210 --> 01:06.060
Mereka disebut kamus javascript seperti yang kita katakan adalah objek.

01:06.100 --> 01:14.380
Java memiliki peta dan Ruby memiliki hash dan tabel hash sangat penting di seluruh ilmu komputer.

01:14.560 --> 01:21.970
Anda melihat mereka banyak di basis data dalam cache dan mereka sangat berguna.

01:21.990 --> 01:23.550
Jadi apa yang mereka.

01:23.580 --> 01:28.710
Dan juga Anda mungkin bertanya-tanya apa arti nama tabel hash.

01:28.740 --> 01:30.100
Dari mana nama ini berasal.

01:31.400 --> 01:33.640
Baiklah mari kita lihat sebuah contoh.

01:33.660 --> 01:41.700
Bayangkan Anda akan berbelanja bahan makanan dan Anda memiliki objek di sini, dan Anda ingin

01:42.150 --> 01:45.470
menambahkan anggur memiliki properti objek keranjang.

01:45.480 --> 01:49.250
Sekali lagi kami menggunakan sintaks javascript tetapi ini seharusnya terlihat familier bagi Anda.

01:49.320 --> 01:55.620
Jadi kami ingin menetapkan bahwa Baskett dog Grace akan sama dengan 10000.

01:55.650 --> 01:59.540
Kami membeli 10.000 anggur karena Anda tidak pernah memiliki terlalu banyak anggur.

02:00.600 --> 02:07.100
Sekarang pertama-tama pikirkan bagaimana kita akan menyimpan ini dengan perlombaan menjadi sedikit lebih sulit.

02:07.200 --> 02:08.370
Kanan.

02:08.370 --> 02:15.890
Dan kemudian kembali Kami memiliki indeks yang bernomor dan lembah dengan tabel hash atau objek.

02:15.960 --> 02:20.760
Kita harus menetapkan kunci yang anggur dan nilai.

02:20.760 --> 02:23.950
Jadi kita harus menetapkan pasangan nilai kunci.

02:24.090 --> 02:26.520
Jadi segera kita melihat beberapa manfaat di sini.

02:27.680 --> 02:39.790
Sekarang cara kerja tabel hash adalah kita memiliki kunci yang merupakan anggur dan kunci ini digunakan sebagai indeks tempat untuk

02:39.790 --> 02:42.220
menemukan nilai dalam memori.

02:42.800 --> 02:49.160
Ingat dengan kenaikan gaji kami memiliki indeks yang merupakan nomor tetapi dengan tabel hash kami

02:49.160 --> 02:53.650
menggunakan anggur sebagai cara untuk menemukannya di rak memori kami.

02:53.660 --> 02:57.790
Ini dilakukan dengan cara ini dengan sesuatu yang disebut fungsi hash.

02:57.830 --> 03:00.680
Tapi untuk sekarang kita anggap ini kotak hitam.

03:00.710 --> 03:02.090
Kami tidak tahu apa yang terjadi di sini.

03:03.060 --> 03:07.790
Yang akan terjadi adalah kita akan mengirim anggur ke kotak hitam ini.

03:08.100 --> 03:11.700
Kotak hitam ini akan melakukan sihir.

03:12.090 --> 03:19.780
Dan dari situ muncul kunci ke indeks di mana kita ingin menyimpan nilai ini.

03:20.650 --> 03:31.900
Jadi sekarang 1000 anggur dapat disimpan dan alamat memori ini 7 1 1 dan secara teknis itu benar-benar

03:31.960 --> 03:36.090
menyimpan kunci anggur dan nilai 10.000.

03:36.130 --> 03:40.510
Di sini saya baru saja menyederhanakannya menjadi 10.000 agar lebih bersih.

03:40.600 --> 03:45.580
Tetapi perlu diingat bahwa itu akan menyimpan kunci dan nilai dan saya akan menunjukkan kepada Anda diagram

03:45.580 --> 03:47.050
yang menunjukkan ini nanti.

03:47.050 --> 03:57.930
Jadi kotak hitam ini di sini harus memutuskan di mana menempatkan data pada memori kita di komputer kita.

03:58.150 --> 04:06.190
Tapi Anda mungkin bertanya-tanya apa ini dan mengapa dia harus memutuskan di mana harus meletakkan semua informasi ini.

04:06.430 --> 04:09.520
Untuk itu saya akan lihat di video Babai berikutnya.
