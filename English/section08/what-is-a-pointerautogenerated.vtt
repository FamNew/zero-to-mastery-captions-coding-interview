WEBVTT

00:01.310 --> 00:02.560
Welcome back.

00:02.570 --> 00:09.190
Let's quickly talk about pointer's something that you'll hear a lot in computer science topics a pointer

00:09.190 --> 00:11.180
is simply this.

00:11.340 --> 00:20.200
It's a reference to another place in memory or another object or another node and in javascript we can

00:20.200 --> 00:24.520
demonstrate it with something like this.

00:24.710 --> 00:36.640
If I have an object let's call it object one that is a simple object that has a as true.

00:36.900 --> 00:38.270
And I'm going to comment this out

00:41.020 --> 00:48.800
and now we do something like Konst object 2 equals object 1.

00:48.910 --> 00:57.040
We've just created a pointer a reference to an object and that is what a pointer is.

00:57.040 --> 01:00.150
It's simply a reference here.

01:00.190 --> 01:02.920
I'm not copying the object.

01:02.980 --> 01:05.470
I'm not saying object 1 equals Akos.

01:05.470 --> 01:06.100
True.

01:06.100 --> 01:16.170
And also creating another location in memory that says A equals true in memory when we look at our ram.

01:16.340 --> 01:18.170
There's only one entry.

01:18.280 --> 01:29.260
A equals to true and both object want an object to point to the same location in memory to show you

01:29.260 --> 01:30.090
that is the case.

01:30.100 --> 01:32.110
Let's just console log

01:35.610 --> 01:39.590
object 1 and then console dialog.

01:41.060 --> 01:43.090
Object to.

01:43.370 --> 01:45.800
And just so we're clear on this.

01:45.800 --> 01:55.690
I'm going to say one here and this is going to be two so that if I run this I have both a ECOs to true.

01:55.940 --> 02:07.380
But if I change object A or accessing property in object one and I say that is going to equal Booya

02:07.800 --> 02:16.860
and I run this look of that both object Twan an object to changed because I've created a pointer here

02:17.100 --> 02:21.530
saying I object to is going to reference object 1 like so.

02:22.730 --> 02:26.490
And they both point to the same location in memory.

02:27.600 --> 02:29.680
And that's what a pointer is.

02:29.730 --> 02:38.540
It's simply saying Hey this is where it is in memory and when we look at our link list example when

02:38.540 --> 02:51.090
we remove let's say a node at index of two and I Hago one two we remove that and that just disappears

02:51.240 --> 02:54.120
from memory how does that work.

02:54.500 --> 03:04.930
Well if we go back to our example I can just delete object 1 and I'm going to change this in to lead

03:04.950 --> 03:09.330
because we are going to change the values here.

03:09.630 --> 03:11.100
Phi click run.

03:12.000 --> 03:17.060
I get reference error object Twan is not defined at line 14.

03:17.250 --> 03:19.220
That's right over here.

03:19.500 --> 03:19.820
OK.

03:19.830 --> 03:23.750
So let's just comment this out because object 1 doesn't exist anymore.

03:23.930 --> 03:26.290
Reichlich run.

03:26.490 --> 03:34.900
I still have object to as Booya even though we deleted object 1.

03:35.060 --> 03:43.940
What's happening here well the way it works in most programming languages is that our computers are

03:43.940 --> 03:53.720
going to delete the memory that is on use and because it sees that object to is still referencing this

03:53.720 --> 03:58.950
location in memory this value in memory it's not going to delete it.

03:59.810 --> 04:05.650
Because there's still a pointer to this location and memory.

04:05.960 --> 04:08.410
And this is how things get deleted.

04:08.420 --> 04:16.390
In languages like javascript this is what you might call garbage collection where as soon as we say

04:17.560 --> 04:30.150
object to dot or object two equals hello now and I click Run now object to which you referenced the

04:30.450 --> 04:36.870
memory space that had a equals to true is now just simply a string.

04:36.900 --> 04:43.910
So because javascript is garbage collected that is memory is managed automatically.

04:44.130 --> 04:50.040
This gets automatically garbage collected and deleted because nothing is pointing to it.

04:51.590 --> 04:59.090
However there is a low level languages where you have to manage your own memory and you have to manually

04:59.090 --> 05:03.220
delete this on referenced item in memory.

05:03.830 --> 05:12.170
And this can cause a lot of possible issues where you leave memory that's not being used in memory which

05:12.230 --> 05:13.770
is a valuable resource.

05:13.970 --> 05:20.030
But then there's also benefits with non garbage collected languages where you get to manage your own

05:20.030 --> 05:23.960
memory so you can make things really really fast that efficient.

05:23.970 --> 05:24.730
All right.

05:24.870 --> 05:34.340
I think that's enough for pointer's a pointer is simply a reference to something else in memory.

05:34.690 --> 05:42.070
And we're going to use this knowledge in our next video to create our very first linked list data structure.

05:42.290 --> 05:43.040
I'll see in the next one.
