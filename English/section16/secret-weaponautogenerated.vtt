WEBVTT

00:01.060 --> 00:02.520
So you've nailed your interview.

00:02.520 --> 00:05.260
Up until now everything is going well.

00:05.260 --> 00:06.880
The coding went well.

00:06.880 --> 00:11.800
Some of the questions that they asked to you were prepared for you told your hero stories.

00:11.800 --> 00:13.780
Everything feels good.

00:14.260 --> 00:20.920
Or sometimes things don't work out as expected and maybe you didn't do that well in your coding questions

00:21.400 --> 00:29.050
or they asked you a question that you weren't expecting and the non-technical questions will never give

00:29.050 --> 00:29.350
up.

00:29.350 --> 00:37.050
First of all because it's very rare that you have a perfect interview remember you're not competing

00:37.080 --> 00:40.500
against 100 percent test score.

00:40.500 --> 00:45.770
You're competing against other candidates other candidates get asked questions too.

00:45.810 --> 00:53.010
There are ways that you can improve those odds and make sure that you still stand out even if perhaps

00:53.250 --> 00:55.030
you didn't ace everything.

00:55.440 --> 00:58.940
And here I want to list out some of my what I call secret weapons.

00:58.980 --> 00:59.370
Yes.

00:59.370 --> 01:06.210
A bit over exaggerated a name but I think if you're able to work these into conversations into questions

01:06.450 --> 01:10.950
I think it will improve your chances of landing that job.

01:11.840 --> 01:17.930
Because what I'm about to show you are problems that I've noticed a lot in the workplace when it comes

01:17.930 --> 01:19.470
to programmers.

01:19.490 --> 01:28.250
There are a ton of really great programmers but amongst them there's always things that are common that

01:28.280 --> 01:37.070
are problematic perhaps not for us programmers but for managers bosses CEOs and by avoiding these common

01:37.100 --> 01:42.410
pitfalls you can stand out and show that you're not a typical developer.

01:43.250 --> 01:45.810
So let's go over some of the.

01:45.970 --> 01:49.800
The first one is simplicity over complexity.

01:50.020 --> 01:56.500
It's very easy as a programmer to get into our own hands and complicate things and come up with really

01:56.500 --> 02:04.630
interesting solutions to problems that perhaps only we understand or perhaps that only a few smart coders

02:04.630 --> 02:05.990
might understand.

02:06.490 --> 02:11.510
But remember code and problem solving is about solving problems for others.

02:11.890 --> 02:18.100
And as we know code has to be maintainable readable you want to demonstrate that you're the type of

02:18.100 --> 02:22.280
programmer that emphasizes simplicity over complexity.

02:22.390 --> 02:28.000
Work that into your conversation work how when you worked on a project with team members you wanted

02:28.000 --> 02:34.690
to make sure that the code was readable that you didn't overcomplicate the problem just to appear smart

02:34.870 --> 02:36.300
or clever.

02:36.340 --> 02:43.840
Instead you focused on readable code because you understood that working in a team means making sure

02:43.840 --> 02:48.440
that the code is readable and maintainable long after you've written it.

02:49.400 --> 02:55.520
This is a great thing to point out in an interview because it's rare for somebody to understand this

02:55.910 --> 02:57.700
with only a few years of experience.

02:57.710 --> 03:02.830
This is something that a lot of senior developers know or senior programmers know.

03:03.230 --> 03:07.550
The next one is a famous quote that a lot of people must have heard by now.

03:07.550 --> 03:11.010
Premature Optimization is the root of all evil.

03:11.860 --> 03:17.170
We always try to optimize our code optimize performance see what we can do better.

03:17.650 --> 03:25.810
But you have to work with your limited time that is based on how much time I have now how many resources

03:25.810 --> 03:31.540
I have now is making a 1 percent improvement in performance worth it.

03:31.540 --> 03:36.490
If you're able to demonstrate to the interviewer that you're the type of person that understands the

03:36.490 --> 03:43.660
value of time and resources and money and how you're able to work on things that matter such as performance

03:43.660 --> 03:45.040
which is a big one.

03:45.040 --> 03:49.290
Without getting too obsessed with it that's a good thing.

03:49.300 --> 03:55.420
And again something that a lot of senior developers and programmers know the next one is kind of related.

03:55.520 --> 03:59.650
You want to focus on overall goal and not be myopic.

03:59.660 --> 04:01.280
Now what does myopic mean.

04:01.490 --> 04:05.730
Myopic means you're just very narrowly focused on one thing.

04:06.510 --> 04:14.790
So we get tasked with a problem and all we care about is solving that problem and we start to ignore

04:15.060 --> 04:18.190
some other things that might be important to the project.

04:18.240 --> 04:26.580
For example a client might have a deadline that needs a product out the door and finished in a week

04:27.030 --> 04:32.570
by you as a programmer focus on really good code a really good performance.

04:32.640 --> 04:40.440
You ignore that request for one week and instead focus on really really good code.

04:40.740 --> 04:46.400
And that's not necessarily a bad thing but you have to understand the business consequences of what

04:46.410 --> 04:46.900
we do.

04:47.100 --> 04:51.600
And when you're working at a company or for yourself or freelancing you want to look at the overall

04:51.600 --> 04:55.690
goal and not just focus on what you think is important.

04:56.040 --> 05:00.320
You have to understand what the needs are of the project and work with them.

05:00.480 --> 05:05.400
And again if you're able to demonstrate this and work this into the conversation such as saying something

05:05.400 --> 05:12.960
like a client requested that we deliver a product before their big conference I knew that that was a

05:12.960 --> 05:13.980
very important thing.

05:13.980 --> 05:21.180
So I set up a meeting with my team to make sure that that was our number one priority and that we could

05:21.180 --> 05:22.550
always refactor code.

05:22.560 --> 05:27.780
And we actually dedicated time after the conference for a week where we brief after our code but we

05:27.780 --> 05:33.480
made sure that the very first thing we did was to make sure that we're able to meet the deadline that

05:33.480 --> 05:39.600
the client wants because the client provides the overall goal of a project and a happy client means

05:39.600 --> 05:45.750
that we're able to continue working with them again showing that you're not a typical developer that

05:45.750 --> 05:52.340
just gets given a task and that's all you focus on that you understand the overall needs of your tasks.

05:52.340 --> 05:58.700
This is another very common one especially amongst programmers like us where we tend to like to complain

05:58.700 --> 06:04.180
about clients ugly code maybe coworkers that can get frustrating.

06:04.190 --> 06:07.210
First of all that usually never helps.

06:07.640 --> 06:11.660
But it also creates a very toxic environment at the workplace.

06:11.660 --> 06:16.340
Nobody wants to work with somebody that complains all the time that creates this negative energy.

06:16.340 --> 06:21.680
And if you're able to talk to your interviewer and how you're the type of person that is comfortable

06:21.680 --> 06:27.680
working with clients in that you don't like complaining or being negative about coworkers or bosses

06:28.280 --> 06:32.900
well that immediately makes you stand out because you're a pleasant person to work with.

06:32.960 --> 06:37.440
And that's a hard thing to put into a conversation in an interview.

06:37.610 --> 06:44.000
But there are ways of doing it such as your past experiences where you may have demonstrated these values.

06:44.360 --> 06:46.440
And then finally this is a big one.

06:46.490 --> 06:47.460
No ego.

06:47.630 --> 06:55.400
When we write code or when we program when we solve problems we take pride in our work and when we submit

06:55.400 --> 07:00.950
something like a poor request or somebody checks our code and they make comments to it we might feel

07:00.950 --> 07:07.010
a little bit hurt by these comments because we feel that we're not perfect that we made mistakes and

07:07.220 --> 07:10.500
a lot of attention can form in workplaces when this happens.

07:10.580 --> 07:12.580
It is a big problem for companies.

07:12.770 --> 07:18.860
But if you're the type of coder that likes getting feedback that takes constructive criticism and understands

07:18.860 --> 07:21.360
that there's no ego here we work as a team.

07:21.370 --> 07:27.980
There's no individual and that the overall goal of a company or project is what matters and you're able

07:27.980 --> 07:34.890
to demonstrate that that immediately is a big sell or it makes you a very valuable developer.

07:35.210 --> 07:42.140
And if you're able to do these things all over here that makes you really stand out.

07:42.170 --> 07:48.350
I can speak from experience as when hiring developers and working at some big companies that these are

07:48.350 --> 07:49.600
really rare.

07:49.700 --> 07:57.290
Having a developer that understands these and is comfortable with these points is very very valuable

07:57.500 --> 08:01.210
and you mostly only see these with senior developers.

08:01.280 --> 08:05.380
So this is your secret weapon if you're able to work these into conversation.

08:05.450 --> 08:09.110
It's going to really give you those extra points with the interviewer.

08:09.280 --> 08:10.990
I'll see in the next one but by.
