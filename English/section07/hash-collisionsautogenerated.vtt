WEBVTT

00:01.700 --> 00:08.660
Looking at hash functions you can start to think about what actions they perform and how fast it can

00:08.660 --> 00:09.220
be done.

00:10.880 --> 00:18.080
When it comes to inserting something in our memory space Well it's going to be overdone.

00:18.170 --> 00:26.570
We hash the key such as grapes through the hash function and places it automatically into the address

00:26.570 --> 00:29.630
space that it comes up with.

00:29.720 --> 00:38.150
Look up is the exact same we access the property that property is going to get hashed and direct us

00:38.150 --> 00:41.860
exactly to the address to find the values.

00:41.890 --> 00:43.640
What about deletes.

00:43.720 --> 00:53.740
Same thing we simply use the key right away we know where to delete the item from and because it isn't

00:53.770 --> 00:54.600
ordered.

00:54.820 --> 00:58.630
We don't have to shift indexes like we did with arrays.

00:58.690 --> 01:01.430
Everything is just nice and simple.

01:01.540 --> 01:07.840
What about searching if we want to find something in our basket like apples.

01:07.850 --> 01:09.590
Well that's easy too.

01:09.690 --> 01:18.910
We simply use hash functions if we go to our playground in javascript I can create an object lets say

01:18.930 --> 01:26.250
let the user and this user will have property of each 54.

01:26.300 --> 01:31.200
Let's say that the name is going to be Kylie

01:33.820 --> 01:34.940
magic.

01:35.080 --> 01:42.850
Well let's say Kylie does of magic skills so whole set it to True and for fun let's say that the scream

01:43.480 --> 01:52.390
is a function that will just console log a scream.

01:53.440 --> 02:00.800
That was not the strongest of screams but I don't want to scare people around me when I run this.

02:00.930 --> 02:08.100
I've created a user object and the age 54 named Kylie magic.

02:08.160 --> 02:16.790
True scream and dysfunction are all going to get placed somewhere in memory different addresses.

02:16.990 --> 02:19.050
But I can access this really really fast.

02:19.060 --> 02:30.320
I can say user Daut age which is going to give me 54 at one time perhaps adding a new property.

02:30.340 --> 02:38.790
I can just simply say user dot spell is going to equal Habra Berra.

02:39.570 --> 02:49.590
And if I run this and let's just check out what the user object gives us we see that we now have the

02:49.650 --> 02:52.900
spell Habra cadabra added.

02:52.920 --> 03:03.460
This again is access of all one is 0 of one because we take it through the hash functions and the computer

03:03.460 --> 03:07.660
decides where to put both spell and abracadabra in memory.

03:09.360 --> 03:17.780
And a firearm user ADOT scream same thing but I cannot spell scream.

03:17.800 --> 03:19.500
Same thing I get.

03:19.870 --> 03:29.390
I get to access this function in memory really really fast at all of one how amazing is that.

03:29.800 --> 03:33.070
And I know where you're thinking hash tables are amazing.

03:33.070 --> 03:38.720
We should be using them all the time and you're right we should be using them in a lot of cases.

03:38.980 --> 03:42.190
But as we know there's always pros and cons.

03:42.370 --> 03:48.370
Now let me talk to you about one of the main problems with hash tables.

03:49.270 --> 03:51.920
And I have a nice visual to demonstrate this for you.

03:51.960 --> 03:57.290
I'll link to this and this video so you can play around with it later.

03:57.300 --> 04:02.750
I have a little animation here where we have 12 memory spaces.

04:02.880 --> 04:12.420
Remember our computer has limited space and when we create an object or a hash table the computer decides

04:13.110 --> 04:14.900
how much space to allocate.

04:14.940 --> 04:18.150
It's not going to allocate all the space to the hash table.

04:18.270 --> 04:24.630
It's going to allocate a bit of it and I'll show you later on when we implement our own hash table.

04:24.990 --> 04:31.150
How we can adjust the size but seeing that there is only 12 spaces you can imagine.

04:31.150 --> 04:37.890
If I insert here let's say one see if I can make this bigger so you can see it.

04:38.070 --> 04:47.070
There you go I'm going to answer let's say the number three gets inserted here let's do 55.

04:47.330 --> 04:48.060
Insert it.

04:48.080 --> 04:49.550
Oh what happened there.

04:50.660 --> 05:03.060
Do you see the the hash function randomly assigned a space in memory and put it in three remember.

05:03.240 --> 05:09.010
There's nothing telling the hash function to evenly distribute until everything is full.

05:09.570 --> 05:15.640
Although hash functions are optimized to try to distribute this data all over.

05:15.860 --> 05:17.910
It also matters what we put into it.

05:17.990 --> 05:27.550
So when 55 gets hashed Well this hash function generates the address location of three to put in it.

05:27.710 --> 05:31.630
And because we already have three there it does something funny here.

05:31.820 --> 05:33.910
Let's keep adding here and see what happens.

05:33.950 --> 05:43.810
I'll add two maybe add 12 and finally add 14 0.

05:43.860 --> 05:46.130
It did the same thing again.

05:46.340 --> 05:50.060
And what we just noticed here it's something called Collision

05:53.260 --> 05:56.700
and a collision looks something like this.

05:56.740 --> 05:58.350
We have the keys.

05:58.600 --> 06:10.720
Let's say we're inserting the name and the phone number of a user and we initially place John Smith

06:10.960 --> 06:16.790
this key gets hashed gets placed in the address space of 1:52 and gets stored.

06:16.900 --> 06:22.960
Remember how he said it actually stores both keys and values it stores in something called bucket's

06:23.260 --> 06:27.480
John Smith with the value that is his phone number right here.

06:28.340 --> 06:35.980
And then we keep going with Lisa Smith then Sam doe than Sandra Oh no.

06:35.990 --> 06:44.610
As soon as we house Sandra Dee it becomes the same address space as John Smith and we have a collision

06:45.600 --> 06:53.700
and because of this collision we need a way to store both users somehow in this address space and something

06:53.700 --> 06:58.730
funky is going on here with this little circle and then a point.

06:58.740 --> 07:01.530
And Sandra Dee.

07:01.530 --> 07:02.890
And just a hint here.

07:03.030 --> 07:09.880
This is actually a new data structure that we're going to learn about called link lists coming up.

07:10.230 --> 07:17.630
You see with hash tables we can't avoid these collisions with enough data with limited memory.

07:17.640 --> 07:20.470
We're always going to have this collision.

07:20.610 --> 07:28.920
So there is a possibility if we go back to our example and I refresh year to start from scratch that

07:30.900 --> 07:37.060
we constantly just add despite our hash table that's really really fast.

07:38.100 --> 07:42.340
Costly just keep adding to the same memory space.

07:42.930 --> 07:52.350
Which slows down our ability to access or insert information because now if I want to check what's in

07:52.350 --> 07:58.380
this address space I have to go one two three four five and so on and so forth.

07:58.570 --> 08:11.270
Theoretically when you have a collision it slows down reading and writing with a hash table with 0 and

08:11.750 --> 08:18.350
divided by k where k is the size of your hash table.

08:18.430 --> 08:26.730
And remember because we remove constants and simplify things it becomes an all and operation.

08:26.730 --> 08:31.290
Now coalition will likely happen in any hash table implementation.

08:31.470 --> 08:38.130
And luckily for you you're never going to have to really implemented yourself and it's not a very common

08:38.340 --> 08:42.140
interview question but you do want to know about it so you can talk about it.

08:43.060 --> 08:47.170
There's two common ways to deal with these collisions.

08:47.170 --> 08:52.430
I showed you one of them with something called link list which we'll talk about later on.

08:52.960 --> 09:01.750
But if we go to the hash table Wikipedia page and look at collision resolution you can see that there's

09:01.810 --> 09:07.480
a ton of different ways to solve collisions.

09:07.730 --> 09:13.730
The way that I showed you is called Separate chaining but there's different methods like open addressing

09:14.120 --> 09:20.240
and Robinhood hashing that you can read about if you're really interested in the topic.

09:20.660 --> 09:29.070
The point I wanted to make is that there is a bit of a of a downside when we talk about fast lockups

09:29.610 --> 09:34.870
and hash tables occasionally depending on the hash function.

09:35.010 --> 09:37.980
It might take o of an.

09:38.150 --> 09:43.160
All right let's keep going and expand our knowledge of hash tables and the next video.
