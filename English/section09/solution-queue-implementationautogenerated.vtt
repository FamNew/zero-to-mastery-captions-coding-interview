WEBVTT

00:01.630 --> 00:08.320
Let's implement our two data structure the very first thing we're going to do is the nice and simple

00:08.350 --> 00:15.300
peek which simply tells us what is the very first item in our queue.

00:15.340 --> 00:28.020
So this got first is where we want to peek into if I run my cue dot peek I should get.

00:28.340 --> 00:36.560
No because while there's absolutely nothing in our queue What about on cue or Anke.

00:36.810 --> 00:37.980
I'm not sure how to pronounce that.

00:37.980 --> 00:40.670
Let's go with you in there.

00:40.890 --> 00:47.070
We want to add to our waitlist again similar to what we did with stacks.

00:47.070 --> 00:53.790
We're going to create a new node and we're going to instantiate this new note with a value.

00:53.790 --> 00:55.960
Remember we have the class here.

00:57.700 --> 01:04.330
And this value's going to get added to a node that has this value and this dot next.

01:04.620 --> 01:14.130
We then want to check and say hey if this DOD lenth is be called to zero.

01:14.160 --> 01:16.970
That means there is nothing in our queue.

01:17.430 --> 01:28.930
Then simply say this stuff first is going to equal the new node and same with this dot last because

01:28.940 --> 01:32.040
there is only one node in our list.

01:32.050 --> 01:38.410
This is very similar to what we implemented in the stack.

01:38.510 --> 01:39.130
Otherwise

01:42.460 --> 01:50.120
we can say that this cannot last dot next.

01:50.130 --> 01:53.200
So that is whatever is at the very last of the line.

01:53.520 --> 01:59.860
And whatever the next value is which initially whatever is last is pointing to no.

01:59.970 --> 02:07.880
But we want to update that to say this time instead of Point No Point then you note as the last in line.

02:08.550 --> 02:19.010
And we want to update this done last two now equal the new node so that whatever was last in line is

02:19.010 --> 02:25.490
now pointing to the new node and the new node is now last which is going to make sure that this last

02:25.730 --> 02:38.640
points to no Finally we can forget to increase the length by 1 and then we can just simply return this

02:38.930 --> 02:40.390
our data structure.

02:40.470 --> 02:41.640
So let's have a look.

02:41.640 --> 02:45.270
We want to create this line.

02:45.370 --> 02:52.840
Q So all we're going to do is say we want to on cue joy.

02:53.090 --> 02:57.520
In fact like Ron first note I get joy with next.

02:57.740 --> 03:02.620
And last node is again Joy with next no and length of one.

03:02.630 --> 03:03.820
So far so good.

03:04.010 --> 03:08.130
What if Matt comes and gets in line as well.

03:08.340 --> 03:13.010
We Matt we now have first note that is joy and last node.

03:13.070 --> 03:14.020
That is Matt.

03:14.090 --> 03:21.210
And you can see here that the first note of joy is pointing to the next node that is not.

03:21.340 --> 03:23.360
All right let's add a few more will add

03:26.050 --> 03:27.910
Pawel who just got in line.

03:28.040 --> 03:32.220
And then finally sumir a little bit late but he got in line as well.

03:32.310 --> 03:36.700
If I click Run perfect our last note is sumir.

03:36.760 --> 03:45.480
We have a lentil for and we have the join node which is the very first item in our queue Now let's say

03:45.480 --> 03:48.510
we open the door and we start letting people in.

03:48.600 --> 03:55.430
We want to dequeue this list and go from the very first first in first out all the way till the end

03:56.480 --> 04:03.740
once again it's very similar to a stack except that we grab the node from the beginning instead of it.

04:03.750 --> 04:13.520
And so we're first going to say if there's no this thof first if there's no first item we can also check

04:13.520 --> 04:14.810
the Leontine if we want.

04:14.810 --> 04:17.330
So the list is empty.

04:17.330 --> 04:20.010
In that case just return no.

04:20.480 --> 04:26.270
And by list I mean the queue if the queue is empty then return no.

04:26.390 --> 04:33.950
We also want to check if this is the last node in our queue so we can do something similar with why

04:33.950 --> 04:44.120
we didn't instax we can say if there start first equals this last again we can just check lenth years

04:44.130 --> 04:54.160
well if we want but for now this would be fine if that's the case I want this dot last to equal Knol

04:54.880 --> 05:05.590
remember make sure that now last points to all and regardless as soon as we dequeue we want to say this.

05:05.800 --> 05:16.950
First equals this dot first dot next that is whoever is first now because we're going to remove joy

05:17.280 --> 05:24.490
we want who is ever after joy that is mat to be in first priority now.

05:25.380 --> 05:35.090
Then we simply say this lenth minus minus to decrease the length and we can return.

05:35.320 --> 05:40.310
If I run this well it's the same thing because we haven't run it here.

05:40.450 --> 05:42.060
So let's go ahead and do that.

05:42.580 --> 05:52.710
Let's first of all run my cue dot peek to see who should be coming out of the queue and that is joy.

05:52.720 --> 06:03.110
So if I do my Q Dot dequeue and I click run we see that now Matt is first in line.

06:03.110 --> 06:08.900
Joy has been removed and lenth is of three and one thing to point out here.

06:09.090 --> 06:19.500
Once we run dequeue here we've completely lost the joy node from our memory because we have no more

06:19.590 --> 06:20.660
reference to it.

06:20.670 --> 06:27.420
Nothing is pointing to that memory space and Javascript the way it works is going to garbage collect

06:27.750 --> 06:33.930
and remove joy if we wanted to hold a pointer to joy.

06:33.970 --> 06:36.490
Then we could say Konst holding

06:39.240 --> 06:51.080
pointer and say this dot first so that before we update whoever's first we can reference it with this

06:51.080 --> 06:57.550
variable so that we could potentially if we still want to use joy for example in a waiting list app

06:57.590 --> 07:00.950
maybe we still want to do something to the user.

07:01.160 --> 07:07.130
We can do this and still have access to the join node.

07:07.130 --> 07:08.350
All right let's finish the skew.

07:08.370 --> 07:14.810
Let's dequeue everybody from here if I do dequeue And let's return this back to this.

07:14.810 --> 07:16.330
So we see what's happening.

07:16.850 --> 07:22.960
If I run now Pavel is first in line and sumir is last in line.

07:22.970 --> 07:32.400
If I click or if I had dequeue again and I click Run sumir is the last person on the list.

07:32.400 --> 07:34.810
But then we can finally let him in as well.

07:35.690 --> 07:36.950
There we go.

07:37.010 --> 07:45.640
Now we have an empty cube and we've just implemented our own Q data structure well done.

07:45.660 --> 07:47.190
Hope you had fun.

07:47.190 --> 07:48.730
I'll see in the next video.

07:49.040 --> 07:49.270
Babai.
