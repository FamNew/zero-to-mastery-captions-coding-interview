WEBVTT

00:00.860 --> 00:02.110
Welcome back.

00:02.120 --> 00:04.550
How was the remove method.

00:04.560 --> 00:06.460
It was pretty tough wasn't it.

00:06.500 --> 00:10.220
Now I don't expect you to be able to get this even for me.

00:10.220 --> 00:15.670
It took quite a lot of time to get this working and I'm going to give you another chance to finish it.

00:15.680 --> 00:22.310
If you want I have my code minimized here just to show you the if statements and the steps that I'm

00:22.310 --> 00:22.890
taking.

00:23.090 --> 00:27.580
So you could always pause this video but let me just go over the steps.

00:27.590 --> 00:32.550
I'm going to take and usually I like coding step by step.

00:32.720 --> 00:41.210
But when it comes to this function it's really really hard to go step by step when you're not coding

00:41.210 --> 00:44.340
yourself or you don't have a diagram to point to and show.

00:44.330 --> 00:48.350
So I'm going to leave the code for you so you can implement it on your own.

00:48.350 --> 00:55.070
And actually like I always recommend dried out with a piece of paper to understand what's going on.

00:55.080 --> 01:01.280
Otherwise if I just coded this along it would be a 30 minute video of you getting bored and then you're

01:01.400 --> 01:08.340
going to have fun with that as structures anymore and we don't want that so all we're doing is well

01:08.400 --> 01:15.030
if we remove we're going to check if there's anything in the root if there isn't while the tree's empty

01:15.060 --> 01:22.100
there's nothing to remove we're going to return false otherwise we're going to grab the current node

01:22.340 --> 01:29.180
as the star route first and then we do something new here that we haven't seen before we declare a new

01:29.180 --> 01:35.000
variable called Parent note and this is something you may have realized I was you coded this along.

01:35.450 --> 01:42.840
We need a reference to the parent because if we remove something from here such as 14.

01:43.430 --> 01:52.130
Well we need to before we get to one Geb a reference of 14 so that when we get to one we have access

01:52.130 --> 02:00.660
to 30 so that we can link 30 to one so if we go back here now that I have parent node variable and I

02:00.660 --> 02:09.800
do my loop to check if the value is less than the current node in which case I'll go left and this should

02:09.800 --> 02:10.820
be familiar.

02:10.820 --> 02:18.230
But this time I'm also keeping track of the parent node and otherwise if we need to go to the right

02:18.360 --> 02:23.540
while then we go to the right but also keep track of the parent node.

02:23.570 --> 02:31.640
Now this is the interesting part we're looping through everything here and nothing's too crazy until

02:31.640 --> 02:33.860
we get to a match.

02:33.860 --> 02:41.380
Once we get to a match and we find the current node that we want to delete we have a match.

02:41.480 --> 02:45.490
We need to get to work and we have three options here.

02:45.550 --> 02:56.360
The first option is that the current node has no right child if the current node has no right child.

02:56.430 --> 03:01.440
Let's have 55 as an example or let's do 14 as an example.

03:01.620 --> 03:03.450
If I remove 14

03:10.660 --> 03:19.090
you saw that all we did was we remove 14 but we kept a reference to the parent node and just moved one

03:19.330 --> 03:20.360
up.

03:20.500 --> 03:25.330
That was nice and easy and in here with option 1.

03:25.440 --> 03:32.530
That's really all we do we first make sure that the parent node doesn't equal to no.

03:32.530 --> 03:38.710
That means we're modifying the root node otherwise the root valuable variable gets updated to our current

03:38.710 --> 03:48.430
node otherwise if parent is greater than the current value then make current left child a child or the

03:48.430 --> 03:55.330
parent if parent is less than the current value make left child or right child of the parent.

03:55.450 --> 04:01.150
Again I know this is confusing and like I said this is something that you might have to go on your own.

04:01.150 --> 04:06.280
I'll leave comments out here for you so you can actually play around with it and play around with visual

04:06.280 --> 04:08.150
go so you understand what's happening.

04:09.520 --> 04:14.460
So that's the first option if that's the case then do that.

04:14.560 --> 04:23.140
If the right child if we have a right child but their right child doesn't have a left child let's find

04:23.160 --> 04:24.070
an example that has.

04:24.100 --> 04:27.810
So we have a right child that doesn't have a left child.

04:27.840 --> 04:29.250
So that is 54.

04:29.320 --> 04:31.810
What happens when we remove 50 for

04:35.190 --> 04:36.110
I click on this

04:39.270 --> 04:51.900
54 gets removed and we just place 55 instead of 54 now so in that case we go again check of the parent

04:51.900 --> 04:53.810
node is not null.

04:54.330 --> 04:56.240
So that we have to replace the root node.

04:56.430 --> 05:05.250
Otherwise we go through similar steps to reassign the node.

05:05.260 --> 05:07.720
What about the last option.

05:07.720 --> 05:09.670
Right child that has a left child.

05:10.150 --> 05:13.630
So if we go here we have a right child.

05:13.630 --> 05:17.400
Let's say if we want to delete 30 that has a left child 38.

05:17.470 --> 05:19.480
So if we want to delete 30

05:23.060 --> 05:23.660
and he'd go

05:27.150 --> 05:37.040
we still traverse until we get to the left and then oh boy we do a bit of a magic this will require

05:37.040 --> 05:42.890
you to read through the code and I've left some nice comments for you so that it makes sense but we're

05:42.890 --> 05:45.440
essentially finding the right child's left.

05:45.440 --> 05:55.310
Most child and looping through this changing the sub trees of the tree like I said this is quite a bit

05:55.310 --> 05:57.800
advanced and really hard to explain.

05:57.800 --> 06:03.920
Just on the screen so I do recommend it if you weren't able to get the remove function to go through

06:03.920 --> 06:05.140
this step by step.

06:05.210 --> 06:10.850
I'll link to the code right in the resources so you can play around with this and see that it works

06:11.240 --> 06:14.770
but to check that remove does in fact work.

06:14.900 --> 06:23.240
Let's say I'll remove zero from this list if I click Run I get undefined because there's nothing to

06:23.240 --> 06:34.720
remove but if I remove let's say 170 and I click Run I get true and if I traverse our list and try and

06:34.720 --> 06:39.300
grab our tree now let's open up developer tools

06:45.480 --> 06:58.140
paste this PRESENTER And now if we go to 9 20 and we see that the right node is now empty where 170

06:58.280 --> 06:59.010
should have been.

06:59.060 --> 07:05.280
So we're able to delete the node successfully that's enough for now.

07:05.430 --> 07:08.280
You can play around with the remove method if you want.

07:08.280 --> 07:10.480
You can try and code yourself.

07:10.530 --> 07:12.590
It will take a bit of time.

07:12.690 --> 07:13.700
I know I keep saying this.

07:13.700 --> 07:20.280
I do encourage you not to get disappointed if the removed method was really difficult.

07:20.400 --> 07:24.870
I didn't really want to include it in the course because it is overly complex and not something you

07:24.870 --> 07:27.470
want to get too worried about when it comes to an interview.

07:27.960 --> 07:32.910
But I thought some of you might be interested in it just make sure that it's not something that discourages

07:32.910 --> 07:36.100
you as long as you can do the inserts and lookups.

07:36.240 --> 07:38.380
That's what matters for interviews.

07:38.490 --> 07:40.080
I'll see in the next one.

07:40.100 --> 07:40.380
Bobby.
